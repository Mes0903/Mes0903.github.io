import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as T,b as l,a as t,d as Q,f as e,e as r,r as o,o as n}from"./app-C_w5Vw85.js";const d={},p={class:"MathJax",jax:"SVG",style:{position:"relative"}},h={style:{"vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"2.919ex",height:"1.887ex",role:"img",focusable:"false",viewBox:"0 -833.9 1290.1 833.9","aria-hidden":"true"},m={class:"MathJax",jax:"SVG",style:{position:"relative"}},c={style:{"vertical-align":"-0.186ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.163ex",height:"2.072ex",role:"img",focusable:"false",viewBox:"0 -833.9 3608.2 915.9","aria-hidden":"true"},u={class:"MathJax",jax:"SVG",style:{position:"relative"}},g={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.325ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5889.7 1000","aria-hidden":"true"},V={class:"MathJax",jax:"SVG",style:{position:"relative"}},H={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},M={class:"MathJax",jax:"SVG",style:{position:"relative"}},b={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},L={class:"MathJax",jax:"SVG",style:{position:"relative"}},f={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},x={class:"MathJax",jax:"SVG",style:{position:"relative"}},k={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},Z={class:"MathJax",jax:"SVG",style:{position:"relative"}},R={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},v={class:"MathJax",jax:"SVG",style:{position:"relative"}},S={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},y={class:"MathJax",jax:"SVG",style:{position:"relative"}},w={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},B={class:"MathJax",jax:"SVG",style:{position:"relative"}},A={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},I={class:"MathJax",jax:"SVG",style:{position:"relative"}},D={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},F={class:"MathJax",jax:"SVG",style:{position:"relative"}},E={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},q={class:"MathJax",jax:"SVG",style:{position:"relative"}},C={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},j={class:"MathJax",jax:"SVG",style:{position:"relative"}},O={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},U={class:"MathJax",jax:"SVG",style:{position:"relative"}},G={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"},J={class:"MathJax",jax:"SVG",style:{position:"relative"}},P={style:{"vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"13.074ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 5778.7 1000","aria-hidden":"true"};function z(N,a){const s=o("center");return n(),T("div",null,[a[84]||(a[84]=l(`<h1 id="常用的-risc-v-筆記" tabindex="-1"><a class="header-anchor" href="#常用的-risc-v-筆記"><span>常用的 RISC-V 筆記</span></a></h1><h2 id="基本架構" tabindex="-1"><a class="header-anchor" href="#基本架構"><span>基本架構</span></a></h2><p>一條典型的 RISC-V 語句由 3 部分組成：</p><blockquote><p>[ label: ] [ operation ] [ comment ]</p></blockquote><p>三個都是可選的，因此可接受空行。 label 後面需接上冒號；operation 是比較重要的部分，真正的操作在這裡，裡面還可以分解；comment 是註釋。</p><h3 id="label-標籤" tabindex="-1"><a class="header-anchor" href="#label-標籤"><span>label(標籤)</span></a></h3><p>任何以冒號結尾的標示符都會被認為是一個標籤，看個例子</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.macro do_nothing</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# directive</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">	nop</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		# pseudo-instruction</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">	nop</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		# pseudo-instruction</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.endm		</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# directive</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	.text</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">		# directive</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	.global _start</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# directive</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">_start:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> 		# Label</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	li x6, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">5</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# pseudo-instruction</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	li x7, </span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">4</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# pseudo-instruction</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;">	add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x5, x6, x7</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# instruction</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	do_nothing</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# Calling macro</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stop:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	j stop	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# statement in one line</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">	.end	</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	# End of file</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>當中的 <code>_start:</code> 與 <code>stop</code> 就是 label，可以和後續的東西分成兩行寫，也可以寫同一行。</p><p>label 可以想成幫一段位址取了一個名字，方便我們後續使用</p><h3 id="operation" tabindex="-1"><a class="header-anchor" href="#operation"><span>operation</span></a></h3><p>operation 總共有四種變化：</p><ul><li>instruction (指令)<br> 直接對應二進位的機器指令字符串</li><li>pseudo-instruction (偽指令)<br> 為了提高寫程式的效率，可以用一條偽指令指示組譯器產生多條實際的 instruction</li><li>directive (指示/偽操作)<br> 通過類似 instruction 的形式(以 「.」 開頭)，通知組譯器如何控制程式碼的產生，不對應具體的指令，是由組譯器定義的</li><li>macro<br> 採用 .macro/.endm 自定義的 macro</li></ul><h2 id="指令的操作對象" tabindex="-1"><a class="header-anchor" href="#指令的操作對象"><span>指令的操作對象</span></a></h2><p>指令的操作對象可以分兩大類：</p>`,15)),t("ul",null,[a[7]||(a[7]=t("li",null,[e("暫存器 "),t("ul",null,[t("li",null,[e("RV32I 中共有 32 個通用暫存器，x0~x31，還有一些特權暫存器，其中 x0 是 0 暫存器，不可寫(但可以做為 "),t("code",null,"rd"),e(")，讀出來的值永遠為 0 "),t("blockquote",null,[t("p",null,"Register x0 can be used as the destination if the result is not required.")])]),t("li",null,"在 RISC-V 中，Hart 在執行算術邏輯運算時操作的數據需要直接來自暫存器")])],-1)),t("li",null,[a[6]||(a[6]=e("記憶體 ")),t("ul",null,[a[4]||(a[4]=t("li",null,"Hart 可以執行在暫存器和記憶體之間的數據讀寫操作",-1)),a[5]||(a[5]=t("li",null,"讀寫操作使用 Byte 為基本單位尋址",-1)),t("li",null,[a[2]||(a[2]=e("RV32 可以存取最多 ")),t("mjx-container",p,[(n(),T("svg",h,a[0]||(a[0]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(500,0)"></path></g></g></g></g></g>',1)]))),a[1]||(a[1]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("msup",null,[t("mn",null,"2"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mn",null,"32")])])])],-1))]),a[3]||(a[3]=e(" 個 Byte 的記憶體空間"))])])])]),a[85]||(a[85]=t("h2",{id:"指令編碼格式",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#指令編碼格式"},[t("span",null,"指令編碼格式")])],-1)),Q(s,null,{default:r(()=>a[8]||(a[8]=[t("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/risc-v-note/image/1.png?raw=true"},null,-1)])),_:1}),a[86]||(a[86]=t("br",null,null,-1)),a[87]||(a[87]=t("p",null,"指令最後會被翻譯為機器指令，裡面的 32 bits 都有對應的意思，以 32 bits 對齊，每個 32 bits 會照上面的圖被劃分為不同的區域(field)",-1)),a[88]||(a[88]=t("p",null,'最終的指令類型是由 funct3/funct7 和 opcode 一起決定的，題外話，funct3 中的 "3" 代表佔了 3 個 bit，funct7 同理。',-1)),a[89]||(a[89]=t("p",null,"對於 opcode 的部分有另一張表規定了其內容意義：",-1)),Q(s,null,{default:r(()=>a[9]||(a[9]=[t("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/risc-v-note/image/2.png?raw=true"},null,-1)])),_:1}),a[90]||(a[90]=l("<br><p>opcode 的前兩位永遠為 11，而第 2~4 位是一組的，5~6 位是一組的，我們用一個例子來學習這個表格是怎麼看得：</p><blockquote><p>0000000 rs2 rs1 000 rd 0110011 | ADD</p></blockquote><p>這是 ADD 這個指令的機器碼範例，依照最前面的表格我們知道後面的 <code>0110011</code> 是 opcode，可以看見前兩位(最右邊)為 <code>11</code></p><p>我們先看第 5~6 位，這裡是 <code>01</code>，因此我們去上表的左邊縱排找 <code>01</code>，之後看有哪些可能，有 STORE、STORE-FP、custom-1、AMO、OP、LUI、OP-32 這些</p><p>我們再依照第 2~4 位來確認位置，這裡是 <code>100</code>，對到表格上就是 <code>OP</code>，也就是說 ADD 屬於 <code>OP</code> 類型的指令，也就是基本操作</p><p>RISC-V 標準中為 little endian，假設在記憶體中的值為 <code>b3 05 95 00</code>，則需要先將其倒反過來為：<code>00 95 05 b3</code>，寫為二進制的話為 <code>00000000-10010101-00000101-10110011</code>，到標準中查表可知此指令為 <code>add x11, x10, x9</code></p>",7)),Q(s,null,{default:r(()=>a[10]||(a[10]=[t("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/risc-v-note/image/3.png?raw=true"},null,-1)])),_:1}),a[91]||(a[91]=l('<br><p>指令格式有 6 種，也就是第一張圖裡面的 R、I、S 那些：</p><ul><li>R-type (register)<br> 每條指令中有三個 fields，用於指定 3 個暫存器參數</li><li>I-type (Immediate)<br> 每條指令除了帶有兩個暫存器參數以外，還帶有一個常數參數 (寬度為 12 bits)</li><li>S-type (Store)<br> 每條指令除了帶有兩個暫存器參數以外，還帶有一個常數參數 (寬度為 12 bits，但 fields 的組成方式不同於 I-type)</li><li>B-type (Branch)<br> 每條指令除了帶有兩個暫存器參數外，還有一個常數參數 (寬度為 12 bits，但取值為 2 的倍數)</li><li>U-type (Upper)<br> 每條指令含有一個暫存器參數和一個常數參數 (寬度為 20 bits，用來表示一個常數的高 20 位)</li><li>J-type (Jump)<br> 每條指令內有一個暫存器參數和一個常數參數 (寬度為 20 bits)</li></ul><h2 id="算術運算指令-arithmetic-instruction" tabindex="-1"><a class="header-anchor" href="#算術運算指令-arithmetic-instruction"><span>算術運算指令(Arithmetic Instruction)</span></a></h2><h3 id="add" tabindex="-1"><a class="header-anchor" href="#add"><span>ADD</span></a></h3><p>功能：將兩暫存器的值相加<br> 語法：<code>ADD RD, RS1, RS2</code></p><blockquote><p>例：add x5, x6, x7 為 x5 = x6 + x7</p></blockquote><p>格式：R-type</p>',8)),Q(s,null,{default:r(()=>a[11]||(a[11]=[t("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/risc-v-note/image/4.png?raw=true"},null,-1)])),_:1}),a[92]||(a[92]=l('<br><p>對應意義：</p><ul><li>opcode(7)：0110011 (OP)</li><li>funct3 為 000，funct7 為 0000000</li><li>rs1(5)：第一個 operand (source register 1)</li><li>rs2(5)：第二個 operand (source register 2)</li><li>rd(5)：destination register，用於存放加出來的結果</li></ul><h3 id="sub" tabindex="-1"><a class="header-anchor" href="#sub"><span>SUB</span></a></h3><p>功能：將兩暫存器的值相減<br> 語法：<code>SUB RD, RS1, RS2</code></p><blockquote><p>例：sub x5, x6, x7 為 x5 = x6 - x7</p></blockquote><p>格式同為 R-type</p><h3 id="addi-add-immediate" tabindex="-1"><a class="header-anchor" href="#addi-add-immediate"><span>ADDI (ADD Immediate)</span></a></h3><p>功能：將暫存器中的值與一常數相加<br> 語法： <code>ADDI RD, RS1, IMM</code></p><blockquote><p>例：addi x5, x6, 1 為 x5 = x6 + 1</p></blockquote><p>格式：I-type</p>',11)),Q(s,null,{default:r(()=>a[12]||(a[12]=[t("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/risc-v-note/image/5.png?raw=true"},null,-1)])),_:1}),a[93]||(a[93]=t("br",null,null,-1)),a[94]||(a[94]=t("p",null,"對應意義：",-1)),a[95]||(a[95]=t("ul",null,[t("li",null,"opcode (7)：0b0010011 (OP-IMM)"),t("li",null,"funct3 (3)：和 opcode 一起決定最終指令"),t("li",null,"rs1 (5)：第一個 opecrand (source register 1)"),t("li",null,"rd (5)：destination register，用於存放加出來的結果"),t("li",null,"imm (12)：immediate，常數，要注意只有 12 bits，所以範圍是有限的")],-1)),t("p",null,[a[17]||(a[17]=e("在運算前 ")),a[18]||(a[18]=t("code",null,"imm",-1)),a[19]||(a[19]=e(" 會被 sign-extension 為一個 32 位的數，可以表達的範圍為 ")),t("mjx-container",m,[(n(),T("svg",c,a[13]||(a[13]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="msup" transform="translate(778,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g><g data-mml-node="mtext" transform="translate(2068.1,0)"><path data-c="A0" d=""></path></g><g data-mml-node="msup" transform="translate(2318.1,0)"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="TeXAtom" transform="translate(533,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500,0)"></path></g></g></g></g></g>',1)]))),a[14]||(a[14]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",null,"−"),t("msup",null,[t("mn",null,"2"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mn",null,"11")])]),t("mtext",null," "),t("msup",null,[t("mn",null,"2"),t("mrow",{"data-mjx-texclass":"ORD"},[t("mn",null,"11")])])])],-1))]),a[20]||(a[20]=e("，也就是 ")),t("mjx-container",u,[(n(),T("svg",g,a[15]||(a[15]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g>',1)]))),a[16]||(a[16]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"2048"),t("mo",null,","),t("mn",null,"2047"),t("mo",{stretchy:"false"},")")])],-1))])]),a[96]||(a[96]=l('<h3 id="lui-load-upper-immediate" tabindex="-1"><a class="header-anchor" href="#lui-load-upper-immediate"><span>LUI (Load Upper Immediate)</span></a></h3><p>為了要加超過 12 bits 的常數，risc-v 引入了一個新的指令來「載入一個 32 bits 的常數」，作法是把一個 32 bits 的數切為高 20 位與低 12 位，之後先將高 20 位放到一個暫存器內，在利用 <code>ADDI</code> 將低 12 位的部分加上去</p><p>用來構造高 20 位的指令就是 <code>LUI</code></p><p>功能：構造一個 32 bits 的常數，此常數高 20 位為 <code>imm</code> 的內容，低 12 位為 0，這個常數會作為結果存在 RD 中<br> 語法：<code>LUI RD, IMM</code></p><blockquote><p>例：lui x5, 0x12345 為 x5 = 0x12345 &lt;&lt; 12</p></blockquote><p>格式：U-type</p>',6)),Q(s,null,{default:r(()=>a[21]||(a[21]=[t("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/risc-v-note/image/6.png?raw=true"},null,-1)])),_:1}),a[97]||(a[97]=l(`<br><p>對應意義：</p><ul><li>opcode (7)：0b0110111 (LUI)</li><li>rd (5)：destination register，用於存放加出來的結果</li><li>imm (20)：immediate，常數</li></ul><p>假設我們今天要載入 <code>0x12345678</code>，那步驟為：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">lui x1, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x12345</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     # x1 = 0x12345000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">addi x1, x1, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x678</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  # x1 = 0x12345678</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>但如果數字為 <code>0x12345FFF</code>，那在 <code>addi</code> 的部分會有問題，因為在 <code>addi</code> 運算前 <code>imm</code> 會被 sign-extension 為一個 32-bits 的數</p><p>所以如果是做 <code>addi x1, x1, 0xFFF</code>，那麼是不會得到 <code>0x12345FFF</code> 的，所以我們換個想法，提前先借位，步驟為：</p><div class="language-asm line-numbers-mode" data-highlighter="shiki" data-ext="asm" data-title="asm" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">lui x1, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0x12346</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # x1 = 0x12346000</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">addi x1, x1, -</span><span style="--shiki-light:#986801;--shiki-dark:#C678DD;">1</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    # x1 = 0x12345FFF</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="auipc" tabindex="-1"><a class="header-anchor" href="#auipc"><span>AUIPC</span></a></h3><p>我們在構造一個位址的流程其實和建構一個普通的數值沒有太大的區別，可以用 <code>LUI</code> 和 <code>ADDI</code> 來做，但這樣建構出的會是一個直接指定好的常數，但在構造位址的時候我們還會希望有相對位址，所以就需要 <code>AUIPC</code>，名字中的 <code>PC</code> 指的是 program counter</p><p>功能：構造一個 32 bits 的常數，高 20 位為 <code>imm</code>，低 12 位為 0，但會將此常數與 <code>PC</code> 值相加，結果存於 RD<br> 語法：<code>AUIPC RD, IMM</code></p><blockquote><p>例：auipc x5, 0x12345 為 x5 = 0x12345 &lt;&lt; 12 + PC</p></blockquote><h3 id="相關的-pseudo-instruction" tabindex="-1"><a class="header-anchor" href="#相關的-pseudo-instruction"><span>相關的 pseudo-instruction</span></a></h3><h4 id="neg" tabindex="-1"><a class="header-anchor" href="#neg"><span>NEG</span></a></h4><p>功能：對 RS 取負號，將結果存在 RD 中<br> 語法：<code>NEG RD, RS</code><br> 等價指令：<code>SUB RD, x0, RS</code></p><blockquote><p>例：neg x5, x6</p></blockquote><h4 id="mv" tabindex="-1"><a class="header-anchor" href="#mv"><span>MV</span></a></h4><p>功能：將 RS 中的值複製到 RD 中<br> 語法：<code>MV RD, RS</code><br> 等價指令：<code>ADDI RD, RS, 0</code></p><blockquote><p>例：mv x5, x6</p></blockquote><h4 id="li-load-immediate" tabindex="-1"><a class="header-anchor" href="#li-load-immediate"><span>LI (Load Immediate)</span></a></h4><p>因為用 <code>LUI</code> 在載入一個數時還要考慮提前借位的問題太麻煩了，所以就有了 <code>LI</code></p><p>功能：載入一個常數，組譯器會根據 imm 的情況自動判斷要不要借位<br> 語法：<code>LI RD, IMM</code></p><blockquote><p>例：li x5, 0x12345678 為 x5 = 0x12345678</p></blockquote><h4 id="la-load-address" tabindex="-1"><a class="header-anchor" href="#la-load-address"><span>LA (Load Address)</span></a></h4><p>在寫 code 的時候給出需要載入的 label，組譯器會根據實際情況利用 <code>AUIPC</code> 和其他指令自動生成正確的指令來載入記憶體位址，常用於載入一個函式或變數的位址</p><p>功能：載入一個地址<br> 語法：<code>LA RD, LABEL</code></p><blockquote><p>例：la x5, foo</p></blockquote><h4 id="nop-空指令" tabindex="-1"><a class="header-anchor" href="#nop-空指令"><span>NOP (空指令)</span></a></h4><p>功能：不做任何事<br> 語法：<code>NOP</code><br> 等價指令：<code>ADDI x0, 0, 0</code></p><blockquote><p>例：nop</p></blockquote><h2 id="邏輯運算指令-logical-instructions" tabindex="-1"><a class="header-anchor" href="#邏輯運算指令-logical-instructions"><span>邏輯運算指令 (Logical Instructions)</span></a></h2><h3 id="and" tabindex="-1"><a class="header-anchor" href="#and"><span>AND</span></a></h3><p>功能：<code>RD = RS1 &amp; RS2</code><br> 語法：<code>AND RD, RS1, RS2</code><br> 格式：R-type</p><blockquote><p>例：and x5, x6, x7</p></blockquote><h3 id="or" tabindex="-1"><a class="header-anchor" href="#or"><span>OR</span></a></h3><p>功能：<code>RD = RS1 | RS2</code><br> 語法：<code>OR RD, RS1, RS2</code><br> 格式：R-type</p><blockquote><p>例：or x5, x6, x7</p></blockquote><h3 id="xor" tabindex="-1"><a class="header-anchor" href="#xor"><span>XOR</span></a></h3><p>功能：<code>RD = RS1 ^ RS2</code><br> 語法：<code>XOR RD, RS1, RS2</code><br> 格式：R-type</p><blockquote><p>例：xor x5, x6, x7</p></blockquote><h3 id="andi" tabindex="-1"><a class="header-anchor" href="#andi"><span>ANDI</span></a></h3><p>功能：<code>RD = RS1 &amp; IMM</code><br> 語法：<code>ANDI RD, RS1, IMM</code><br> 格式：I-type</p><blockquote><p>例：<code>andi x5, x6, 20</code></p></blockquote><h3 id="ori" tabindex="-1"><a class="header-anchor" href="#ori"><span>ORI</span></a></h3><p>功能：<code>RD = RS1 | IMM</code><br> 語法：<code>ORI RD, RS1, IMM</code><br> 格式：I-type</p><blockquote><p>例：<code>ori x5, x6, 20</code></p></blockquote><h3 id="xori" tabindex="-1"><a class="header-anchor" href="#xori"><span>XORI</span></a></h3><p>功能：<code>RD = RS1 ^ IMM</code><br> 語法：<code>XORI RD, RS1, IMM</code><br> 格式：I-type</p><blockquote><p>例：<code>xori x5, x6, 20</code></p></blockquote><h3 id="相關的-pseudo-instruction-1" tabindex="-1"><a class="header-anchor" href="#相關的-pseudo-instruction-1"><span>相關的 pseudo-instruction</span></a></h3><h4 id="not" tabindex="-1"><a class="header-anchor" href="#not"><span>NOT</span></a></h4><p>功能：對 RS 做 Bitwise Complement，將結果存在 RD 中<br> 語法：<code>NOT RD, RS</code><br> 等價指令：<code>XORI RD, RS, -1</code></p><blockquote><p>例：not x5, x6</p></blockquote><h2 id="移位運算指令-shifting-instructions" tabindex="-1"><a class="header-anchor" href="#移位運算指令-shifting-instructions"><span>移位運算指令 (Shifting Instructions)</span></a></h2><h3 id="sll-邏輯左移" tabindex="-1"><a class="header-anchor" href="#sll-邏輯左移"><span>SLL (邏輯左移)</span></a></h3><p>補 0</p><p>功能：<code>RD = RS1 &lt;&lt; RS2</code><br> 語法：<code>SLL RD, RS1, RS2</code><br> 格式：R-type</p><blockquote><p>例：sll x5, x6, x7</p></blockquote><h3 id="srl-邏輯右移" tabindex="-1"><a class="header-anchor" href="#srl-邏輯右移"><span>SRL (邏輯右移)</span></a></h3><p>補 0</p><p>功能：<code>RD = RS1 &gt;&gt; RS2</code><br> 語法：<code>SRL RD, RS1, RS2</code><br> 格式：R-type</p><blockquote><p>例：srl x5, x6, x7</p></blockquote><h3 id="slli-邏輯左移常數" tabindex="-1"><a class="header-anchor" href="#slli-邏輯左移常數"><span>SLLI (邏輯左移常數)</span></a></h3><p>補 0</p><p>功能：<code>RD = RS1 &lt;&lt; IMM</code><br> 語法：<code>SLLI RD, RS1, IMM</code><br> 格式：I-type</p><blockquote><p>例：slli x5, x6, 3</p></blockquote><h3 id="srli-邏輯右移常數" tabindex="-1"><a class="header-anchor" href="#srli-邏輯右移常數"><span>SRLI (邏輯右移常數)</span></a></h3><p>補 0</p><p>功能：<code>RD = RS1 &gt;&gt; IMM</code><br> 語法：<code>SRLI RD, RS1, IMM</code><br> 格式：I-type</p><blockquote><p>例：srli x5, x6, 3</p></blockquote><h3 id="sra-算術右移" tabindex="-1"><a class="header-anchor" href="#sra-算術右移"><span>SRA (算術右移)</span></a></h3><p>按符號位補足</p><p>功能：<code>RD = RS1 &gt;&gt; RS2</code><br> 語法：<code>SRA RD, RS1, RS2</code><br> 格式：R-type</p><blockquote><p>例：sra x5, x6, x7</p></blockquote><h3 id="srai-算術右移常數" tabindex="-1"><a class="header-anchor" href="#srai-算術右移常數"><span>SRAI (算術右移常數)</span></a></h3><p>按符號位補足</p><p>功能：<code>RD = RS1 &gt;&gt; IMM</code><br> 語法：<code>SRAI RD, RS1, IMM</code><br> 格式：I-type</p><blockquote><p>例：srai x5, x6, 3</p></blockquote><h2 id="記憶體讀寫指令-load-and-store-instructions" tabindex="-1"><a class="header-anchor" href="#記憶體讀寫指令-load-and-store-instructions"><span>記憶體讀寫指令 (Load and Store Instructions)</span></a></h2><h3 id="lb" tabindex="-1"><a class="header-anchor" href="#lb"><span>LB</span></a></h3>`,80)),t("p",null,[a[24]||(a[24]=t("code",null,"IMM",-1)),a[25]||(a[25]=e(" 範圍為 ")),t("mjx-container",V,[(n(),T("svg",H,a[22]||(a[22]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[23]||(a[23]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"2048"),t("mo",null,","),t("mn",null,"2047"),t("mo",{stretchy:"false"},"]")])],-1))]),a[26]||(a[26]=e("，資料在保存到 RD 前會執行 sign-extension"))]),a[98]||(a[98]=t("p",null,[e("功能：Load Byte，從記憶體中讀一個 8 bits 的數據到 RD 中，記憶體位址為 "),t("code",null,"RS1 + IMM"),t("br"),e(" 語法："),t("code",null,"LB RD, IMM(RS1)"),t("br"),e(" 格式：I-type")],-1)),a[99]||(a[99]=t("blockquote",null,[t("p",null,"例：lb x5, 40(x6)")],-1)),a[100]||(a[100]=t("h3",{id:"lbu",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#lbu"},[t("span",null,"LBU")])],-1)),t("p",null,[a[29]||(a[29]=t("code",null,"IMM",-1)),a[30]||(a[30]=e(" 範圍為 ")),t("mjx-container",M,[(n(),T("svg",b,a[27]||(a[27]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[28]||(a[28]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"2048"),t("mo",null,","),t("mn",null,"2047"),t("mo",{stretchy:"false"},"]")])],-1))]),a[31]||(a[31]=e("，資料在保存到 RD 前會執行 zero-extension"))]),a[101]||(a[101]=t("p",null,[e("功能：Load Byte Unsigned，從記憶體中讀一個 8 bits 的數據到 RD 中，記憶體位址為 "),t("code",null,"RS1 + IMM"),t("br"),e(" 語法："),t("code",null,"LBU RD, IMM(RS1)"),t("br"),e(" 格式：I-type")],-1)),a[102]||(a[102]=t("blockquote",null,[t("p",null,"例：lbu x5, 40(x6)")],-1)),a[103]||(a[103]=t("h3",{id:"lh",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#lh"},[t("span",null,"LH")])],-1)),t("p",null,[a[34]||(a[34]=t("code",null,"IMM",-1)),a[35]||(a[35]=e(" 範圍為 ")),t("mjx-container",L,[(n(),T("svg",f,a[32]||(a[32]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[33]||(a[33]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"2048"),t("mo",null,","),t("mn",null,"2047"),t("mo",{stretchy:"false"},"]")])],-1))]),a[36]||(a[36]=e("，資料在保存到 RD 前會執行 sign-extension"))]),a[104]||(a[104]=t("p",null,[e("功能：Load Halfword，從記憶體中讀一個 16 bits 的數據到 RD 中，記憶體位址為 "),t("code",null,"RS1 + IMM"),t("br"),e(" 語法："),t("code",null,"LH RD, IMM(RS1)"),t("br"),e(" 格式：I-type")],-1)),a[105]||(a[105]=t("blockquote",null,[t("p",null,"例：lh x5, 40(x6)")],-1)),a[106]||(a[106]=t("h3",{id:"lhu",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#lhu"},[t("span",null,"LHU")])],-1)),t("p",null,[a[39]||(a[39]=t("code",null,"IMM",-1)),a[40]||(a[40]=e(" 範圍為 ")),t("mjx-container",x,[(n(),T("svg",k,a[37]||(a[37]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[38]||(a[38]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"2048"),t("mo",null,","),t("mn",null,"2047"),t("mo",{stretchy:"false"},"]")])],-1))]),a[41]||(a[41]=e("，資料在保存到 RD 前會執行 zero-extension"))]),a[107]||(a[107]=t("p",null,[e("功能：Load Halfword Unsigned，從記憶體中讀一個 16 bits 的數據到 RD 中，記憶體位址為 "),t("code",null,"RS1 + IMM"),t("br"),e(" 語法："),t("code",null,"LHU RD, IMM(RS1)"),t("br"),e(" 格式：I-type")],-1)),a[108]||(a[108]=t("blockquote",null,[t("p",null,"例：lhu x5, 40(x6)")],-1)),a[109]||(a[109]=t("h3",{id:"lw",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#lw"},[t("span",null,"LW")])],-1)),t("p",null,[a[44]||(a[44]=t("code",null,"IMM",-1)),a[45]||(a[45]=e(" 範圍為 ")),t("mjx-container",Z,[(n(),T("svg",R,a[42]||(a[42]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[43]||(a[43]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"2048"),t("mo",null,","),t("mn",null,"2047"),t("mo",{stretchy:"false"},"]")])],-1))])]),a[110]||(a[110]=t("p",null,[e("功能：Load Word，從記憶體中讀一個 32 bits 的數據到 RD 中，記憶體位址為 "),t("code",null,"RS1 + IMM"),t("br"),e(" 語法："),t("code",null,"LW RD, IMM(RS1)"),t("br"),e(" 格式：I-type")],-1)),a[111]||(a[111]=t("blockquote",null,[t("p",null,"例：lw x5, 40(x6)")],-1)),a[112]||(a[112]=t("h3",{id:"sb",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#sb"},[t("span",null,"SB")])],-1)),t("p",null,[a[48]||(a[48]=t("code",null,"IMM",-1)),a[49]||(a[49]=e(" 範圍為 ")),t("mjx-container",v,[(n(),T("svg",S,a[46]||(a[46]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[47]||(a[47]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"2048"),t("mo",null,","),t("mn",null,"2047"),t("mo",{stretchy:"false"},"]")])],-1))])]),a[113]||(a[113]=t("p",null,[e("功能：Store Byte，將 RS2 中低 8 bits 的資料寫到記憶體中，記憶體位址為 "),t("code",null,"RS1 + IMM"),t("br"),e(" 語法："),t("code",null,"SB RS2, IMM(RS1)"),t("br"),e(" 格式：S-type")],-1)),a[114]||(a[114]=t("blockquote",null,[t("p",null,"例：sb x5, 40(x6)")],-1)),a[115]||(a[115]=t("h3",{id:"sh",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#sh"},[t("span",null,"SH")])],-1)),t("p",null,[a[52]||(a[52]=t("code",null,"IMM",-1)),a[53]||(a[53]=e(" 範圍為 ")),t("mjx-container",y,[(n(),T("svg",w,a[50]||(a[50]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[51]||(a[51]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"2048"),t("mo",null,","),t("mn",null,"2047"),t("mo",{stretchy:"false"},"]")])],-1))])]),a[116]||(a[116]=t("p",null,[e("功能：Store Halfword，將 RS2 中低 16 bits 的資料寫到記憶體中，記憶體位址為 "),t("code",null,"RS1 + IMM"),t("br"),e(" 語法："),t("code",null,"SH RS2, IMM(RS1)"),t("br"),e(" 格式：S-type")],-1)),a[117]||(a[117]=t("blockquote",null,[t("p",null,"例：sh x5, 40(x6)")],-1)),a[118]||(a[118]=t("h3",{id:"sw",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#sw"},[t("span",null,"SW")])],-1)),t("p",null,[a[56]||(a[56]=t("code",null,"IMM",-1)),a[57]||(a[57]=e(" 範圍為 ")),t("mjx-container",B,[(n(),T("svg",A,a[54]||(a[54]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="38" d="M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1000,0)"></path><path data-c="37" d="M55 458Q56 460 72 567L88 674Q88 676 108 676H128V672Q128 662 143 655T195 646T364 644H485V605L417 512Q408 500 387 472T360 435T339 403T319 367T305 330T292 284T284 230T278 162T275 80Q275 66 275 52T274 28V19Q270 2 255 -10T221 -22Q210 -22 200 -19T179 0T168 40Q168 198 265 368Q285 400 349 489L395 552H302Q128 552 119 546Q113 543 108 522T98 479L95 458V455H55V458Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[55]||(a[55]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"2048"),t("mo",null,","),t("mn",null,"2047"),t("mo",{stretchy:"false"},"]")])],-1))])]),a[119]||(a[119]=l('<p>功能：Store Word，將 RS2 中低 32 bits 的資料寫到記憶體中，記憶體位址為 <code>RS1 + IMM</code><br> 語法：<code>SW RS2, IMM(RS1)</code><br> 格式：S-type</p><blockquote><p>例：sw x5, 40(x6)</p></blockquote><h2 id="分支指令-conditional-branch-instructions" tabindex="-1"><a class="header-anchor" href="#分支指令-conditional-branch-instructions"><span>分支指令 (Conditional Branch Instructions)</span></a></h2><h3 id="beq" tabindex="-1"><a class="header-anchor" href="#beq"><span>BEQ</span></a></h3>',4)),t("p",null,[a[60]||(a[60]=e("跳躍的目標地址計算方法為：先將 IMM * 2，符號擴展後和 PC 值相加得到最終的目標位址，所以跳躍的範圍是以 PC 為基準，加減 4KB 左右 (")),t("mjx-container",I,[(n(),T("svg",D,a[58]||(a[58]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[59]||(a[59]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"4096"),t("mo",null,","),t("mn",null,"4094"),t("mo",{stretchy:"false"},"]")])],-1))]),a[61]||(a[61]=e(")"))]),a[120]||(a[120]=l('<p>實際上在寫的時候不會直接寫常數，而是會寫標籤帶體，交由 Linker 決定最終的 <code>IMM</code> 值</p><p>功能：Branch if EQual，比較 RS1 和 RS2 的值，若相等，執行路徑跳躍到新的地址<br> 語法：<code>BEQ RS1, RS2, IMM</code><br> 格式：B-type</p><blockquote><p>例：beq x5, x6, 100</p></blockquote><h3 id="bne" tabindex="-1"><a class="header-anchor" href="#bne"><span>BNE</span></a></h3>',4)),t("p",null,[a[64]||(a[64]=e("跳躍的目標地址計算方法為：先將 IMM * 2，符號擴展後和 PC 值相加得到最終的目標位址，所以跳躍的範圍是以 PC 為基準，加減 4KB 左右 (")),t("mjx-container",F,[(n(),T("svg",E,a[62]||(a[62]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[63]||(a[63]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"4096"),t("mo",null,","),t("mn",null,"4094"),t("mo",{stretchy:"false"},"]")])],-1))]),a[65]||(a[65]=e(")"))]),a[121]||(a[121]=l('<p>實際上在寫的時候不會直接寫常數，而是會寫標籤帶體，交由 Linker 決定最終的 <code>IMM</code> 值</p><p>功能：Branch if Not Equal，比較 RS1 和 RS2 的值，若不相等，則執行路徑跳躍到新的地址<br> 語法：<code>BNE RS1, RS2, IMM</code><br> 格式：B-type</p><blockquote><p>例：bne x5, x6, 100</p></blockquote><h3 id="blt" tabindex="-1"><a class="header-anchor" href="#blt"><span>BLT</span></a></h3>',4)),t("p",null,[a[68]||(a[68]=e("跳躍的目標地址計算方法為：先將 IMM * 2，符號擴展後和 PC 值相加得到最終的目標位址，所以跳躍的範圍是以 PC 為基準，加減 4KB 左右 (")),t("mjx-container",q,[(n(),T("svg",C,a[66]||(a[66]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[67]||(a[67]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"4096"),t("mo",null,","),t("mn",null,"4094"),t("mo",{stretchy:"false"},"]")])],-1))]),a[69]||(a[69]=e(")"))]),a[122]||(a[122]=l('<p>實際上在寫的時候不會直接寫常數，而是會寫標籤帶體，交由 Linker 決定最終的 <code>IMM</code> 值</p><p>功能：Branch if Less Than，依照「有號」方式比較 RS1 和 RS2 的值，若 RS1 &lt; RS2，則執行路徑跳躍到新的地址<br> 語法：<code>BLT RS1, RS2, IMM</code><br> 格式：B-type</p><blockquote><p>例：blt x5, x6, 100</p></blockquote><h3 id="bltu" tabindex="-1"><a class="header-anchor" href="#bltu"><span>BLTU</span></a></h3>',4)),t("p",null,[a[72]||(a[72]=e("跳躍的目標地址計算方法為：先將 IMM * 2，符號擴展後和 PC 值相加得到最終的目標位址，所以跳躍的範圍是以 PC 為基準，加減 4KB 左右 (")),t("mjx-container",j,[(n(),T("svg",O,a[70]||(a[70]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[71]||(a[71]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"4096"),t("mo",null,","),t("mn",null,"4094"),t("mo",{stretchy:"false"},"]")])],-1))]),a[73]||(a[73]=e(")"))]),a[123]||(a[123]=l('<p>實際上在寫的時候不會直接寫常數，而是會寫標籤帶體，交由 Linker 決定最終的 <code>IMM</code> 值</p><p>功能：Branch if Less Than (Unsigned)，依照「無號」方式比較 RS1 和 RS2 的值，若 RS1 &lt; RS2，則執行路徑跳躍到新的地址<br> 語法：<code>BLTU RS1, RS2, IMM</code><br> 格式：B-type</p><blockquote><p>例：bltu x5, x6, 100</p></blockquote><h3 id="bge" tabindex="-1"><a class="header-anchor" href="#bge"><span>BGE</span></a></h3>',4)),t("p",null,[a[76]||(a[76]=e("跳躍的目標地址計算方法為：先將 IMM * 2，符號擴展後和 PC 值相加得到最終的目標位址，所以跳躍的範圍是以 PC 為基準，加減 4KB 左右 (")),t("mjx-container",U,[(n(),T("svg",G,a[74]||(a[74]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[75]||(a[75]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"4096"),t("mo",null,","),t("mn",null,"4094"),t("mo",{stretchy:"false"},"]")])],-1))]),a[77]||(a[77]=e(")"))]),a[124]||(a[124]=l('<p>實際上在寫的時候不會直接寫常數，而是會寫標籤帶體，交由 Linker 決定最終的 <code>IMM</code> 值</p><p>功能：Branch if Greater than or Equal，依照「有號」方式比較 RS1 和 RS2 的值，若 RS1 &gt;= RS2，則執行路徑跳躍到新的地址<br> 語法：<code>BGE RS1, RS2, IMM</code><br> 格式：B-type</p><blockquote><p>例：bge x5, x6, 100</p></blockquote><h3 id="bgeu" tabindex="-1"><a class="header-anchor" href="#bgeu"><span>BGEU</span></a></h3>',4)),t("p",null,[a[80]||(a[80]=e("跳躍的目標地址計算方法為：先將 IMM * 2，符號擴展後和 PC 值相加得到最終的目標位址，所以跳躍的範圍是以 PC 為基準，加減 4KB 左右 (")),t("mjx-container",J,[(n(),T("svg",P,a[78]||(a[78]=[l('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="mo" transform="translate(278,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1056,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="36" d="M42 313Q42 476 123 571T303 666Q372 666 402 630T432 550Q432 525 418 510T379 495Q356 495 341 509T326 548Q326 592 373 601Q351 623 311 626Q240 626 194 566Q147 500 147 364L148 360Q153 366 156 373Q197 433 263 433H267Q313 433 348 414Q372 400 396 374T435 317Q456 268 456 210V192Q456 169 451 149Q440 90 387 34T253 -22Q225 -22 199 -14T143 16T92 75T56 172T42 313ZM257 397Q227 397 205 380T171 335T154 278T148 216Q148 133 160 97T198 39Q222 21 251 21Q302 21 329 59Q342 77 347 104T352 209Q352 289 347 316T329 361Q302 397 257 397Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(3056,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(3500.7,0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(500,0)"></path><path data-c="39" d="M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z" transform="translate(1000,0)"></path><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z" transform="translate(1500,0)"></path></g><g data-mml-node="mo" transform="translate(5500.7,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g>',1)]))),a[79]||(a[79]=t("mjx-assistive-mml",{unselectable:"on",display:"inline"},[t("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[t("mo",{stretchy:"false"},"["),t("mo",null,"−"),t("mn",null,"4096"),t("mo",null,","),t("mn",null,"4094"),t("mo",{stretchy:"false"},"]")])],-1))]),a[81]||(a[81]=e(")"))]),a[125]||(a[125]=l('<p>實際上在寫的時候不會直接寫常數，而是會寫標籤帶體，交由 Linker 決定最終的 <code>IMM</code> 值</p><p>功能：Branch if Greator than or Equal (Unsigned)，依照「無號」方式比較 RS1 和 RS2 的值，若 RS1 &gt;= RS2，則執行路徑跳躍到新的地址<br> 語法：<code>BGEU RS1, RS2, IMM</code><br> 格式：B-type</p><blockquote><p>例：bgeu x5, x6, 100</p></blockquote><h3 id="相關的-pseudo-instruction-2" tabindex="-1"><a class="header-anchor" href="#相關的-pseudo-instruction-2"><span>相關的 pseudo-instruction</span></a></h3><h3 id="ble" tabindex="-1"><a class="header-anchor" href="#ble"><span>BLE</span></a></h3><p>功能：Branch if Less and Equal，有號方式比較，如果 RS &lt;= RT，跳躍到 OFFSET<br> 語法：<code>BLE RS, RT, OFFSET</code><br> 等價指令：<code>BGE RT, RS, OFFSET</code></p><h3 id="bleu" tabindex="-1"><a class="header-anchor" href="#bleu"><span>BLEU</span></a></h3><p>功能：Branch if Less or Equal Unsigned，無號方式比較，如果 RS &lt;= RT，跳躍到 OFFSET<br> 語法：<code>BLEU RS, RT, OFFSET</code><br> 等價指令：<code>BGEU RT, RS, OFFSET</code></p><h3 id="bgt" tabindex="-1"><a class="header-anchor" href="#bgt"><span>BGT</span></a></h3><p>功能：Branch if Greater Than，有號方式比較，如果 RS &gt; RT，跳躍到 OFFSET<br> 語法：<code>BGT RS, RT, OFFSET</code><br> 等價指令：<code>BLT RT, RS, OFFSET</code></p><h3 id="bgtu" tabindex="-1"><a class="header-anchor" href="#bgtu"><span>BGTU</span></a></h3><p>功能：Branch if Greator Than Unsigned，無號方式比較，如果 RS &gt; RT，跳躍到 OFFSET<br> 語法：<code>BGTU RS, RT, OFFSET</code><br> 等價指令：<code>BLTU RT, RS, OFFSET</code></p><h3 id="beqz" tabindex="-1"><a class="header-anchor" href="#beqz"><span>BEQZ</span></a></h3><p>功能：Branch if Equal Zero，如果 RS == 0，跳躍到 OFFSET<br> 語法：<code>BEQZ RS, OFFSET</code><br> 等價指令：<code>BEQ RS, x0, OFFSET</code></p><h3 id="bnez" tabindex="-1"><a class="header-anchor" href="#bnez"><span>BNEZ</span></a></h3><p>功能：Branch if Not Equal Zero，如果 RS != 0，跳躍到 OFFSET<br> 語法：<code>BNEZ RS, OFFSET</code><br> 等價指令：<code>BNE RS, x0, OFFSET</code></p><h3 id="bltz" tabindex="-1"><a class="header-anchor" href="#bltz"><span>BLTZ</span></a></h3><p>功能：Branch if Less Than Zero，如果 RS &lt; 0，跳躍到 OFFSET<br> 語法：<code>BLT RS, x0, OFFSET</code><br> 等價指令：<code>BLT RS, x0, OFFSET</code></p><h3 id="blez" tabindex="-1"><a class="header-anchor" href="#blez"><span>BLEZ</span></a></h3><p>功能：Branch if Less or Equal Than Zero，如果 RS &lt;= 0，跳躍到 OFFSET<br> 語法：<code>BLEZ RS, OFFSET</code><br> 等價指令：<code>BGE x0, RS, OFFSET</code></p><h3 id="bgtz" tabindex="-1"><a class="header-anchor" href="#bgtz"><span>BGTZ</span></a></h3><p>功能：Branch if Greater Than Zero，如果 RS &gt; 0，跳躍到 OFFSET<br> 語法：<code>BGTZ RS, OFFSET</code><br> 等價指令：<code>BLT x0, RS, OFFSET</code></p><h3 id="bgez" tabindex="-1"><a class="header-anchor" href="#bgez"><span>BGEZ</span></a></h3><p>功能：Branch if Greater or Equal Zero，如果 RS &gt;= 0，跳躍到 OFFSET<br> 語法：<code>BGEZ RS, OFFSET</code><br> 等價指令：<code>BGE RS, x0, OFFSET</code></p><h2 id="無條件跳躍-unconditional-jump-instructions" tabindex="-1"><a class="header-anchor" href="#無條件跳躍-unconditional-jump-instructions"><span>無條件跳躍 (Unconditional Jump Instructions)</span></a></h2><h3 id="jal-jump-and-link" tabindex="-1"><a class="header-anchor" href="#jal-jump-and-link"><span>JAL (Jump And Link)</span></a></h3><p>功能：跳躍到目標位址，用於呼叫函式<br> 語法：<code>JAL RD, LABEL</code><br> 格式：J-type</p><blockquote><p>例：jal x1, label</p></blockquote>',28)),Q(s,null,{default:r(()=>a[82]||(a[82]=[t("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/risc-v-note/image/7.png?raw=true"},null,-1)])),_:1}),a[126]||(a[126]=l('<br><p>調用函式時地址的計算方法為先對 20 bits 寬的 <code>IMM</code> 乘以 2，然後進行 sign-extension，最後與 PC 相加，因此跳躍的範圍是以 PC 為基準，上下加減 1 MB</p><p>JAL 指令的下一條指令的地址會寫入 RD，保存為返回位址，實際在寫時會用 label 給出跳躍的目標，具體 <code>IMM</code> 值由組譯器和 linker 負責生成。</p><h3 id="jalr-jump-and-link-register" tabindex="-1"><a class="header-anchor" href="#jalr-jump-and-link-register"><span>JALR (Jump And Link Register)</span></a></h3><p>功能：跳躍到目標位址，用於呼叫函式<br> 語法：<code>JALR RD, IMM (RS1)</code><br> 格式：I-type</p><blockquote><p>例：jalr x0, 0(x5)</p></blockquote>',6)),Q(s,null,{default:r(()=>a[83]||(a[83]=[t("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/risc-v-note/image/8.png?raw=true"},null,-1)])),_:1}),a[127]||(a[127]=t("br",null,null,-1)),a[128]||(a[128]=t("p",null,[e("調用函式時地址的計算方法為先對 12 bits 寬的 "),t("code",null,"IMM"),e(" 進行 sign-extension，然後將其與 RS1 的值相加，得到最終的結果後將其最低位設為 0 (用以確保對齊)，因此跳躍的範圍是以 RS1 為基準，上下加減 2KB")],-1))])}const K=i(d,[["render",z],["__file","index.html.vue"]]),Y=JSON.parse(`{"path":"/risc-v/risc-v-note/","title":"常用的 RISC-V 筆記","lang":"en-US","frontmatter":{"title":"常用的 RISC-V 筆記","date":"2024-11-16T00:00:00.000Z","mathjax":true,"tag":"risc-v","category":"risc-v","description":"常用的 RISC-V 筆記 基本架構 一條典型的 RISC-V 語句由 3 部分組成： [ label: ] [ operation ] [ comment ] 三個都是可選的，因此可接受空行。 label 後面需接上冒號；operation 是比較重要的部分，真正的操作在這裡，裡面還可以分解；comment 是註釋。 label(標籤) 任何以冒號結...","head":[["meta",{"property":"og:url","content":"https://mes0903.github.io/risc-v/risc-v-note/"}],["meta",{"property":"og:site_name","content":"Mes's Blog"}],["meta",{"property":"og:title","content":"常用的 RISC-V 筆記"}],["meta",{"property":"og:description","content":"常用的 RISC-V 筆記 基本架構 一條典型的 RISC-V 語句由 3 部分組成： [ label: ] [ operation ] [ comment ] 三個都是可選的，因此可接受空行。 label 後面需接上冒號；operation 是比較重要的部分，真正的操作在這裡，裡面還可以分解；comment 是註釋。 label(標籤) 任何以冒號結..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-22T19:26:29.000Z"}],["meta",{"property":"article:tag","content":"risc-v"}],["meta",{"property":"article:published_time","content":"2024-11-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-22T19:26:29.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"常用的 RISC-V 筆記\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-16T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-22T19:26:29.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mes\\",\\"url\\":\\"https://mes0903.github.io\\"}]}"]]},"headers":[{"level":2,"title":"基本架構","slug":"基本架構","link":"#基本架構","children":[{"level":3,"title":"label(標籤)","slug":"label-標籤","link":"#label-標籤","children":[]},{"level":3,"title":"operation","slug":"operation","link":"#operation","children":[]}]},{"level":2,"title":"指令的操作對象","slug":"指令的操作對象","link":"#指令的操作對象","children":[]},{"level":2,"title":"指令編碼格式","slug":"指令編碼格式","link":"#指令編碼格式","children":[]},{"level":2,"title":"算術運算指令(Arithmetic Instruction)","slug":"算術運算指令-arithmetic-instruction","link":"#算術運算指令-arithmetic-instruction","children":[{"level":3,"title":"ADD","slug":"add","link":"#add","children":[]},{"level":3,"title":"SUB","slug":"sub","link":"#sub","children":[]},{"level":3,"title":"ADDI (ADD Immediate)","slug":"addi-add-immediate","link":"#addi-add-immediate","children":[]},{"level":3,"title":"LUI (Load Upper Immediate)","slug":"lui-load-upper-immediate","link":"#lui-load-upper-immediate","children":[]},{"level":3,"title":"AUIPC","slug":"auipc","link":"#auipc","children":[]},{"level":3,"title":"相關的 pseudo-instruction","slug":"相關的-pseudo-instruction","link":"#相關的-pseudo-instruction","children":[]}]},{"level":2,"title":"邏輯運算指令 (Logical Instructions)","slug":"邏輯運算指令-logical-instructions","link":"#邏輯運算指令-logical-instructions","children":[{"level":3,"title":"AND","slug":"and","link":"#and","children":[]},{"level":3,"title":"OR","slug":"or","link":"#or","children":[]},{"level":3,"title":"XOR","slug":"xor","link":"#xor","children":[]},{"level":3,"title":"ANDI","slug":"andi","link":"#andi","children":[]},{"level":3,"title":"ORI","slug":"ori","link":"#ori","children":[]},{"level":3,"title":"XORI","slug":"xori","link":"#xori","children":[]},{"level":3,"title":"相關的 pseudo-instruction","slug":"相關的-pseudo-instruction-1","link":"#相關的-pseudo-instruction-1","children":[]}]},{"level":2,"title":"移位運算指令 (Shifting Instructions)","slug":"移位運算指令-shifting-instructions","link":"#移位運算指令-shifting-instructions","children":[{"level":3,"title":"SLL (邏輯左移)","slug":"sll-邏輯左移","link":"#sll-邏輯左移","children":[]},{"level":3,"title":"SRL (邏輯右移)","slug":"srl-邏輯右移","link":"#srl-邏輯右移","children":[]},{"level":3,"title":"SLLI (邏輯左移常數)","slug":"slli-邏輯左移常數","link":"#slli-邏輯左移常數","children":[]},{"level":3,"title":"SRLI (邏輯右移常數)","slug":"srli-邏輯右移常數","link":"#srli-邏輯右移常數","children":[]},{"level":3,"title":"SRA (算術右移)","slug":"sra-算術右移","link":"#sra-算術右移","children":[]},{"level":3,"title":"SRAI (算術右移常數)","slug":"srai-算術右移常數","link":"#srai-算術右移常數","children":[]}]},{"level":2,"title":"記憶體讀寫指令 (Load and Store Instructions)","slug":"記憶體讀寫指令-load-and-store-instructions","link":"#記憶體讀寫指令-load-and-store-instructions","children":[{"level":3,"title":"LB","slug":"lb","link":"#lb","children":[]},{"level":3,"title":"LBU","slug":"lbu","link":"#lbu","children":[]},{"level":3,"title":"LH","slug":"lh","link":"#lh","children":[]},{"level":3,"title":"LHU","slug":"lhu","link":"#lhu","children":[]},{"level":3,"title":"LW","slug":"lw","link":"#lw","children":[]},{"level":3,"title":"SB","slug":"sb","link":"#sb","children":[]},{"level":3,"title":"SH","slug":"sh","link":"#sh","children":[]},{"level":3,"title":"SW","slug":"sw","link":"#sw","children":[]}]},{"level":2,"title":"分支指令 (Conditional Branch Instructions)","slug":"分支指令-conditional-branch-instructions","link":"#分支指令-conditional-branch-instructions","children":[{"level":3,"title":"BEQ","slug":"beq","link":"#beq","children":[]},{"level":3,"title":"BNE","slug":"bne","link":"#bne","children":[]},{"level":3,"title":"BLT","slug":"blt","link":"#blt","children":[]},{"level":3,"title":"BLTU","slug":"bltu","link":"#bltu","children":[]},{"level":3,"title":"BGE","slug":"bge","link":"#bge","children":[]},{"level":3,"title":"BGEU","slug":"bgeu","link":"#bgeu","children":[]},{"level":3,"title":"相關的 pseudo-instruction","slug":"相關的-pseudo-instruction-2","link":"#相關的-pseudo-instruction-2","children":[]},{"level":3,"title":"BLE","slug":"ble","link":"#ble","children":[]},{"level":3,"title":"BLEU","slug":"bleu","link":"#bleu","children":[]},{"level":3,"title":"BGT","slug":"bgt","link":"#bgt","children":[]},{"level":3,"title":"BGTU","slug":"bgtu","link":"#bgtu","children":[]},{"level":3,"title":"BEQZ","slug":"beqz","link":"#beqz","children":[]},{"level":3,"title":"BNEZ","slug":"bnez","link":"#bnez","children":[]},{"level":3,"title":"BLTZ","slug":"bltz","link":"#bltz","children":[]},{"level":3,"title":"BLEZ","slug":"blez","link":"#blez","children":[]},{"level":3,"title":"BGTZ","slug":"bgtz","link":"#bgtz","children":[]},{"level":3,"title":"BGEZ","slug":"bgez","link":"#bgez","children":[]}]},{"level":2,"title":"無條件跳躍 (Unconditional Jump Instructions)","slug":"無條件跳躍-unconditional-jump-instructions","link":"#無條件跳躍-unconditional-jump-instructions","children":[{"level":3,"title":"JAL (Jump And Link)","slug":"jal-jump-and-link","link":"#jal-jump-and-link","children":[]},{"level":3,"title":"JALR (Jump And Link Register)","slug":"jalr-jump-and-link-register","link":"#jalr-jump-and-link-register","children":[]}]}],"git":{"createdTime":1740252389000,"updatedTime":1740252389000,"contributors":[{"name":"Mes","username":"Mes","email":"mes900903@gmail.com","commits":1,"url":"https://github.com/Mes"}]},"readingTime":{"minutes":14.63,"words":4389},"filePathRelative":"risc-v/risc-v-note/README.md","localizedDate":"November 16, 2024","excerpt":"","autoDesc":true}`);export{K as comp,Y as data};
