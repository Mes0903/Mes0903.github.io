import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as h,g as n,h as e,f as i,i as t,j as a,r as k,o as p}from"./app-D_u3PNEo.js";const d={},c={class:"MathJax",jax:"SVG",style:{position:"relative"}},A={style:{"vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 600 950","aria-hidden":"true"},o={class:"MathJax",jax:"SVG",style:{position:"relative"}},g={style:{"vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"1.357ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 600 950","aria-hidden":"true"};function u(y,s){const l=k("center");return p(),h("div",null,[s[16]||(s[16]=n('<h1 id="rv32emu-introduction" tabindex="-1"><a class="header-anchor" href="#rv32emu-introduction"><span>rv32emu Introduction</span></a></h1><p>本篇撰寫於 12/12，rv32emu 以 Commit <code>451f8c0</code> 為主，semu 以 PR <code>#66</code> 為主，由於於 semu 上實作的特性之後會移植到 rv32emu 上，因此本文的範例 code 先以 semu 為例，少了 JIT 的部分較易理解</p><p>論文：<a href="https://dl.acm.org/doi/10.1145/3689490.3690399" target="_blank" rel="noopener noreferrer">Accelerate RISC-V Instruction Set Simulation by Tiered JIT Compilation</a></p><p>rv32emu 是針對 32 bit <a href="https://riscv.org/technical/specifications/" target="_blank" rel="noopener noreferrer">RISC-V processor model</a> 開發的精簡高效模擬器，實作了 RISC-V ISA，支援 RV32I 與 M、A、F、C extension 以 C99 撰寫</p><h2 id="模擬器的運作原理" tabindex="-1"><a class="header-anchor" href="#模擬器的運作原理"><span>模擬器的運作原理</span></a></h2><p>模擬器是一種用軟體來模擬硬體的工具，其目的是在不同架構的電腦上運行特定架構的軟體，以我們的例子來說就是要在不同架構的電腦上運行 RISC-V 的軟體</p><p>下圖為 rv32emu 的架構圖：</p>',7)),e(l,null,{default:t(()=>s[0]||(s[0]=[i("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/rv32emu-Introduction/image/1.png?raw=true"},null,-1)])),_:1}),s[17]||(s[17]=n(`<br><p>為了模擬硬體，模擬器主要的邏輯為</p><ol><li>將要模擬的軟體載入到記憶體中 (load ELF)</li><li>指令擷取 (Instruction Fetch)：從記憶體中讀取當前 PC 指向的指令</li><li>指令解碼 (Instruction Decode)：解析指令中的欄位，例如 opcode、rd、rs1、rs2 和立即值 (immediate) 等</li><li>指令執行：根據解碼的結果模擬對應的運算，更新暫存器或記憶體的內容，以及調整 PC 值</li></ol><blockquote><p>後面三點可以簡稱為 CPU emulation</p></blockquote><p>依照 RISC-V 的<a href="https://riscv.org/wp-content/uploads/2017/05/riscv-spec-v2.2.pdf" target="_blank" rel="noopener noreferrer">規格書</a>定義暫存器的數量與功能，並以不同指令集定義的操作和欄位來實作 CPU decoder 與指令集對應的操作(e.g. 加減乘除)，並將結果存在指定的暫存器，換句話說就是模擬 CPU 的<a href="https://en.wikipedia.org/wiki/Instruction_cycle" target="_blank" rel="noopener noreferrer">指令周期</a>，這樣一來就能在不同的指令集架構的電腦上模擬 RISC-V 指令集的軟體</p><h2 id="系統模擬的組成" tabindex="-1"><a class="header-anchor" href="#系統模擬的組成"><span>系統模擬的組成</span></a></h2><p>為了達成上面的目的，至少需要實作以下三個單元：</p><ul><li>ELF loader （針對系統模擬，這項非必要）</li><li>CPU emulator</li><li>Memory I/O</li></ul><p>這三個是一定要完成的部分，完成了這三個就可以模擬一些簡單的 bare metal program 了</p><p>但是如果要有更完整的模擬，像是 linux kernel 這樣複雜的軟體，那就需要根據需求多實作其他單元，像是</p><ul><li>MMU <ul><li>以 RISC-V 的 virtual-memory system 來說，<code>SXLEN=32</code> 時使用 SV32 model，<code>SXLEN=64</code> 時使用 SV39、SV48 或 SV57 model，詳見 priviledge spec 中的第 12 節</li><li><code>satp</code> CSR 控制 S mode 下的位址轉換與保護，此暫存器會保存 root page table 的物理頁號（PPN）與 ASID</li><li>linux kernel 利用 virtual memory(VM) 的機制來實現記憶體管理的機制，但在 linux 中 VM 是透過 MMU 來實作的</li><li>在缺乏 MMU 的環境下，如一些 microcontroller，使用的是 uClinux，其為「MicroController Linux」的縮寫，在此環境中會缺乏一些 systemcall，如 <code>fork</code> 與 <code>brk</code>/<code>sbrk</code><ul><li>詳見 <a href="https://www.kernel.org/doc/html/v6.9/admin-guide/mm/nommu-mmap.html" target="_blank" rel="noopener noreferrer">No-MMU memory mapping support</a> 與 <a href="https://wiki.csie.ncku.edu.tw/embedded/uclinux" target="_blank" rel="noopener noreferrer">uClinux</a></li></ul></li></ul></li><li>peripherals (週邊) <ul><li>PLIC <ul><li>用來管理外部中斷，提供多核處理器的中斷控制功能</li></ul></li><li>CLINT/ACLINT <ul><li>用來支持內部中斷，如 software interrupt 與 timer interrupt</li><li>ACLINT 為 CLINT 的加強版，CLINT 不支援 supervisor-level 的 IPI</li></ul></li></ul></li><li>VirtIO <ul><li>Disk</li><li>network</li><li>GPU</li></ul></li><li>基本的 SBI 支援 <ul><li>risc-v 架構上的 linux kernel 中透過 SBI 與底層溝通</li><li>若要使用 SMP，則需要有 HSM extension 支援</li></ul></li></ul><h3 id="cpu-emulator" tabindex="-1"><a class="header-anchor" href="#cpu-emulator"><span>CPU emulator</span></a></h3><p>要實現 CPU emulation 最基本的功能，我們只需要將會用到的暫存器，解碼的邏輯與指令執行的邏輯實作完成就好了，這邊以 semu 為例看一下簡單的 code，就可以理解到所謂的實作是怎麼一回事了</p><h4 id="register" tabindex="-1"><a class="header-anchor" href="#register"><span>Register</span></a></h4><p>在 riscv.h 中的 struct <code>__hart_internal</code> 定義了會用到的暫存器：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> __hart_internal {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> x_regs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">32</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">];</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* LR reservation virtual address. last bit is 1 if valid */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> lr_reservation;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Assumed to contain an aligned address at all times */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> pc;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Address of last instruction that began execution */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> current_pc;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Supervisor state */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> s_mode;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sstatus_spp;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /**&lt; state saved at trap */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sstatus_spie;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sepc;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scause;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stval;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sstatus_mxr;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /**&lt; alter MMU access rules */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sstatus_sum;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sstatus_sie;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /**&lt; interrupt state */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sie;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sip;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stvec_addr;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /**&lt; trap config */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> stvec_vectored;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> sscratch;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /**&lt; misc */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> scounteren;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> satp;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /**&lt; MMU */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">page_table;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由於模擬器目前是實作在 S mode 下的，所以這邊還有 S mode 下模擬器會用到的暫存器</p><h4 id="instruction-fetch" tabindex="-1"><a class="header-anchor" href="#instruction-fetch"><span>Instruction Fetch</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PRIV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ((</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">emu_state_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">priv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vm_step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">hart_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> insn;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    mmu_fetch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(vm, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">insn);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">unlikely</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">error</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">pc</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> +=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* Assume no integer overflow */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">instret</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就是從 memory 中 PC 指向的位址提取出 <code>insn_opcode</code></p><h4 id="decode" tabindex="-1"><a class="header-anchor" href="#decode"><span>Decode</span></a></h4><p>提取出 <code>insn_opcode</code> 後按照 Instruction Set 裡面給的表去做一一對應，你可以在 <a href="https://github.com/riscv/riscv-isa-manual/blob/main/src/rv-32-64g.adoc" target="_blank" rel="noopener noreferrer">RISCV ISA MANUAL</a> 中看到這張表</p><p>以 ADDI 為例，其指令格式長這樣：</p><table><thead><tr><th>imm[11:0]</th><th>rs1</th><th>funct3</th><th>rd</th><th>opcode</th><th>I-type</th></tr></thead><tbody><tr><td>imm[11:0]</td><td>rs1</td><td>000</td><td>rd</td><td>0010011</td><td>ADDI</td></tr></tbody></table><p>因此在 riscv_private.h 中我們就可以看到 <code>RV32_OP_IMM</code> 的定義為 <code>0b0010011</code>：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* base RISC-V ISA */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">enum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_OP_IMM </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0010011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_OP </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0110011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_LUI </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0110111</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_AUIPC </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0010111</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_JAL </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1101111</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_JALR </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1100111</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_BRANCH </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1100011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_LOAD </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0000011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_STORE </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0100011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_MISC_MEM </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0001111</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_SYSTEM </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1110011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    RV32_AMO </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0101111</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在 <code>vm_step</code> 中就會根據 opcode 的值選擇對應的格式：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> PRIV</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ((</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">emu_state_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">priv</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> vm_step</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">hart_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> insn_opcode </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> insn </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MASK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), value;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (insn_opcode) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RV32_OP_IMM:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        set_dest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                 op_rv32i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read_rs1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> decode_i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RV32_OP:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(insn </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 25</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            set_dest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">                vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                op_rv32i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read_rs1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read_rs2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        else</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">            set_dest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">                     op_mul</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read_rs1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> read_rs2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> RV32_SYSTEM:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        op_system</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        vm_set_exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> RV_EXC_ILLEGAL_INSN</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因為是以 ADDI 為例，所以這邊就會進到 <code>RV32_OP_IMM</code> 的部分，再其中會再以類似的方法將其餘的欄位，如 <code>rd</code>、<code>rs1</code>、<code>imm</code> 與 <code>func3</code>，給解析出來，得到確切的指令</p><h4 id="execute" tabindex="-1"><a class="header-anchor" href="#execute"><span>Execute</span></a></h4><p>在知道實際上要執行的是哪個指令後就可以直接於我們 host 端的平台上實作該指令的功能了，以 ADDI 來說其行為是將 <code>rs1</code> 加上 <code>imm</code> 的值寫入 <code>rd</code>，因此實作上直接利用 uint32_t 的加法就可以了：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> NEG_BIT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (insn </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint32_t</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> op_rv32i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint32_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> is_reg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint32_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint32_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /* TODO: Test ifunc7 zeros */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">decode_func3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(insn)) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* IFUNC_ADD */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((is_reg </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> NEG_BIT) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> -</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">010</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* IFUNC_SLT */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) a) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) b);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">011</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* IFUNC_SLTU */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* IFUNC_XOR */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">^</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">110</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* IFUNC_OR */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">111</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* IFUNC_AND */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">001</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* IFUNC_SLL */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&lt;&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MASK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    case</span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;"> 0b</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">101</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* IFUNC_SRL */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> NEG_BIT </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) (((</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int32_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) a) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MASK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)))</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* SRA */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                       :</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (b </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&amp;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MASK</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">))</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> /* SRL */</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    __builtin_unreachable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#undef</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> NEG_BIT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ADDI 的 func3 是 <code>000</code>，因此會計算 <code>a + ((is_reg &amp;&amp; NEG_BIT) ? -b : b);</code> 並回傳，而在剛剛的 <code>vm_step</code> 中將其值作為參數傳入了 <code>set_dest</code>，其定義如下：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> inline</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> set_dest</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">hart_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint32_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> insn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> uint32_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> x</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    uint8_t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rd </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> decode_rd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(insn);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (rd)</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        vm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">-&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">x_regs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[rd] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> x;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看見這邊將計算的值寫入到了 <code>rd</code>，如此一來就完成了 <code>ADDI</code> 的執行</p><h3 id="plic-aclint-clint" tabindex="-1"><a class="header-anchor" href="#plic-aclint-clint"><span>PLIC &amp; ACLINT/CLINT</span></a></h3><h4 id="plic" tabindex="-1"><a class="header-anchor" href="#plic"><span>PLIC</span></a></h4><p>對於 PLIC，詳見 <a href="https://hackmd.io/@Mes/plic" target="_blank" rel="noopener noreferrer">RISC-V PLIC</a> 與 <a href="https://github.com/riscv/riscv-plic-spec/blob/master/riscv-plic.adoc" target="_blank" rel="noopener noreferrer">spec</a></p><p>RISC-V 內將 Trap 分為 Exception 與 Interrupt，而 Interrupt 有三種，分別為 software interrupt、timer interrupt 與 external interrupt。 而 PLIC 全名為 Platform Level Interrupt Controller，是一個 memory mapped device，如上述所說的用來處理 external interrupt，也就是下圖左邊的部分：</p>`,39)),e(l,null,{default:t(()=>s[1]||(s[1]=[i("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/rv32emu-Introduction/image/2.png?raw=true"},null,-1),i("p",null,[a("(img src: "),i("a",{href:"https://www.youtube.com/watch?v=iPbaG_wnNJY",target:"_blank",rel:"noopener noreferrer"},"Tuesday @ 0900 RISC V Interrupts Krste Asanović, UC Berkeley & SiFive Inc"),a(")")],-1)])),_:1}),s[18]||(s[18]=i("p",null,"PLIC 內主要分為 PLIC Gateway 與 PLIC Core，當中斷源（Interrupt Source）發起中斷時，其訊號會到達 Gateway，Gateway 再根據規定將這個中斷轉發給 PLIC Core，而 PLIC Core 再根據規定，利用 multicasting 的方式尋找可以處理這個中斷的 hart",-1)),s[19]||(s[19]=i("p",null,"下圖是更具體的流程：",-1)),e(l,null,{default:t(()=>s[2]||(s[2]=[i("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/rv32emu-Introduction/image/3.png?raw=true"},null,-1),i("p",null,"(Figure 2. PLIC Interrupt Flow)",-1)])),_:1}),s[20]||(s[20]=n(`<p>步驟如下：</p><ul><li>全域中斷從其來源發送到中斷閘道，該閘道負責處理每個來源的中斷信號</li><li>中斷閘道隨後向 PLIC 核心發送單一的中斷請求，這些請求會在核心的中斷掛起位元（interrupt pending bits, IP）中鎖存（latches）</li><li>如果目標有啟用掛起的中斷，且掛起中斷的優先級超過每個目標的閾值，則 PLIC 核心會將中斷通知轉發給一個或多個目標</li><li>當目標接收到外部中斷後，它會向 PLIC 核心發送中斷請求，以檢索針對該目標的最高優先級全域中斷來源的識別碼</li><li>PLIC 核心隨後清除相應的中斷來源掛起位元（interrupt source pending bit）</li><li>在目標處理完該中斷後，會向相關的中斷閘道發送中斷完成消息</li><li>之後中斷閘道便可以再為相同的來源向 PLIC 轉發另一個中斷請求了</li></ul><h4 id="aclint" tabindex="-1"><a class="header-anchor" href="#aclint"><span>ACLINT</span></a></h4><p>對於 ACLINT，詳見 <a href="https://hackmd.io/@Mes/ACLINT" target="_blank" rel="noopener noreferrer">RISC-V ACLINT</a> 與 <a href="https://github.com/riscv/riscv-aclint/blob/main/riscv-aclint.adoc" target="_blank" rel="noopener noreferrer">spec</a></p><p>ACLINT 是一「組」 memory mapped devices，用於在 multi-hart 的 RISC-V 平台上提供</p><ul><li>inter-processor interrupts (IPI)</li><li>定時器功能 (Timer functionalities)</li></ul><p>內部分為有三個部分：</p><ul><li>MTIMER <ul><li>Machine-level</li><li>用以支持計時和產生 timer 中斷</li><li>內含一個 <code>MTIME</code> 與多個 <code>MTIMECMP</code> 暫存器</li></ul></li><li>MSWI <ul><li>Machine-level</li><li>提供 Machine-level IPI 的功能</li><li>內含一至多個 <code>MSIP</code> 暫存器，視連接的 HART 數量而定</li></ul></li><li>SSWI <ul><li>Supervisor-level</li><li>提供 Supervisor-level IPI 功能</li><li>內含一至多個 <code>SETSSIP</code> 暫存器，視連接的 HART 數量而定</li></ul></li></ul><p>這三個為獨立的 interrupt controller，如果平台有替代機制，可以選擇性地省略部分 ACLINT 設備，可以看一下 QEMU 上的<br> device-tree config，你可以用以下命令生成 <code>SMP = 4</code> 情況下有 ACLINT 的 device-tree config：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>qemu-system-riscv64 -machine virt,aclint=true -smp 4 -machine dumpdtb=qemu.dtb</span></span>
<span class="line"><span>dtc -I dtb -O dts -o qemu.dts qemu.dtb</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>你會看到內部有這三個 interrupt controller：</p><div class="language-dts line-numbers-mode" data-highlighter="shiki" data-ext="dts" data-title="dts" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>sswi@2f00000 {</span></span>
<span class="line"><span>  #interrupt-cells = &lt;0x00&gt;;</span></span>
<span class="line"><span>  interrupt-controller;</span></span>
<span class="line"><span>  interrupts-extended = &lt;0x08 0x01 0x06 0x01 0x04 0x01 0x02 0x01&gt;;</span></span>
<span class="line"><span>  reg = &lt;0x00 0x2f00000 0x00 0x4000&gt;;</span></span>
<span class="line"><span>  compatible = &quot;riscv,aclint-sswi&quot;;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mtimer@2004000 {</span></span>
<span class="line"><span>  interrupts-extended = &lt;0x08 0x07 0x06 0x07 0x04 0x07 0x02 0x07&gt;;</span></span>
<span class="line"><span>  reg = &lt;0x00 0x200bff8 0x00 0x4008 0x00 0x2004000 0x00 0x7ff8&gt;;</span></span>
<span class="line"><span>  compatible = &quot;riscv,aclint-mtimer&quot;;</span></span>
<span class="line"><span>};</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mswi@2000000 {</span></span>
<span class="line"><span>  #interrupt-cells = &lt;0x00&gt;;</span></span>
<span class="line"><span>  interrupt-controller;</span></span>
<span class="line"><span>  interrupts-extended = &lt;0x08 0x03 0x06 0x03 0x04 0x03 0x02 0x03&gt;;</span></span>
<span class="line"><span>  reg = &lt;0x00 0x2000000 0x00 0x4000&gt;;</span></span>
<span class="line"><span>  compatible = &quot;riscv,aclint-mswi&quot;;</span></span>
<span class="line"><span>};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="timer-interrupt" tabindex="-1"><a class="header-anchor" href="#timer-interrupt"><span>timer interrupt</span></a></h5><p><code>MTIMER</code> 負責 timer interrupt，其內部有兩個暫存器，<code>MTIMECMP</code> 負責存儲著目標時間值，而 <code>MTIME</code> 會持續遞增。 當 <code>MTIME</code> 的值大於等於 <code>MTIMECMP</code> 時，就會觸發 timer interrupt，中斷狀態會反映在每個 HART 的 <code>mip</code> 暫存器的 MTIP bit</p><h5 id="ipi" tabindex="-1"><a class="header-anchor" href="#ipi"><span>IPI</span></a></h5><p>若要觸發 IPI，只須往對應的 <code>sip</code> 暫存器寫入 1 就好，以 M mode 來說就是 <code>MSIP</code>，S mode 來說就是 <code>SSIP</code></p><h4 id="aclint-clint-與-plic-的差異" tabindex="-1"><a class="header-anchor" href="#aclint-clint-與-plic-的差異"><span>ACLINT/CLINT 與 PLIC 的差異</span></a></h4><h5 id="中斷種類" tabindex="-1"><a class="header-anchor" href="#中斷種類"><span>中斷種類</span></a></h5><ul><li>PLIC 負責外部中斷，如 peripheral devices 與 I/O 設備的中斷</li><li>ACLINT/CLINT 負責內部中斷，如 timer 與 IPI <ul><li>CLINT 僅支援 machine-mode</li><li>ACLINT 多支援了 supervisor mode</li></ul></li></ul><h5 id="數量" tabindex="-1"><a class="header-anchor" href="#數量"><span>數量</span></a></h5><ul><li>PLIC 是所有 hart 共用一個的</li><li>ACLINT/CLINT 是每個 hart 都各自有一個的</li></ul><h5 id="register-1" tabindex="-1"><a class="header-anchor" href="#register-1"><span>register</span></a></h5><ul><li>CLINT 將 IPI 和 timer 功能的暫存器放在一個統一的地址空間中</li><li>ACLINT 將 IPI 和 timer 功能分別定義為獨立的 memory mapped device</li></ul><h3 id="多核系統模擬" tabindex="-1"><a class="header-anchor" href="#多核系統模擬"><span>多核系統模擬</span></a></h3><h4 id="sbi" tabindex="-1"><a class="header-anchor" href="#sbi"><span>SBI</span></a></h4><p>SBI 是 RISC-V 定義的一個位於 OS 和 Firmware 之間的介面，用來提供 OS 需要的功能的介面，像是上面提到的 IPI 與 timer interrupt 的設定。 SBI 的實作被稱為 SEE，因此模擬器會需要提供 SEE（實作 SBI），才有辦法在上面運行 linux kernel</p><p>這樣的設計上底下的 SEE 可以抽換成不同的實作，上層的 OS 也可以正常的運作，也因此 rv32emu 實作在 S mode 下，在 linux 中可以定義不同的 interrupt controller，實作在 S mode 就可以避免每更新 interrupt controller 就需要修改 linux guest 的情況</p>`,27)),e(l,null,{default:t(()=>s[3]||(s[3]=[i("img",{src:"https://github.com/Mes0903/MesBlog/blob/vuepress-theme-hope/src/risc-v/rv32emu-Introduction/image/4.png?raw=true"},null,-1)])),_:1}),s[21]||(s[21]=n('<br><h4 id="sbi-hsm-extension" tabindex="-1"><a class="header-anchor" href="#sbi-hsm-extension"><span>SBI HSM Extension</span></a></h4><p>HSM 全名為 Hart State Management，定義了其一系列的 hart 狀態，並提供 S mode 下的軟體一系列用來改變 hart 狀態的函式介面</p><p>在 <a href="https://www.kernel.org/doc/html/next/riscv/boot.html#kernel-entry" target="_blank" rel="noopener noreferrer">RISC-V Kernel Boot Requirements and Constraints</a> 有提到在 SMP 系統上，有 2 種方法進入 linux kernel：</p><ul><li><p><code>RISCV_BOOT_SPINWAIT</code><br> 主要用於支援沒有 SBI HSM extension 和 M mode RISC-V kernel 的 older firmwares</p><p>此方法會啟動所有 hart，並隨機選一個 hart 來執行 early boot code，其他 hart 則等待初始化完成</p></li><li><p><code>Ordered booting</code><br> 僅會啟動一個 hart，執行 initialization phase，接著使用 SBI HSM extension 來啟動其他的所有 hart</p></li></ul><p>在 Commit <code>cfafe26</code> (<a href="https://github.com/torvalds/linux/commit/cfafe260137418d0265d0df3bb18dc494af2b43e" target="_blank" rel="noopener noreferrer">link</a>) 中引入了第二種方法：</p><blockquote><p>RISC-V: Add supported for ordered booting method using HSM<br><br></p><p>Currently, all harts have to jump Linux in RISC-V. This complicates the multi-stage boot process as every transient stage also has to ensure all harts enter to that stage and jump to Linux afterwards. It also obstructs a clean Kexec implementation.<br><br></p><p>SBI HSM extension provides alternate solutions where only a single hart need to boot and enter Linux. The booting hart can bring up secondary harts one by one afterwards.<br><br></p><p>Add SBI HSM based cpu_ops that implements an ordered booting method in RISC-V. This change is also backward compatible with older firmware not implementing HSM extension. If a latest kernel is used with older firmware, it will continue to use the default spinning booting method.</p></blockquote><p>這裡提到以前每個 hart 在啟動的過程中都必須直接引導到 Linux，這讓 multi-stage 的啟動變得很麻煩，因為每個中間的階段都必須要管理所有的 hart，確保他們正確的轉換到 Linux 中</p><p>而 SBI HSM extension 簡化了啟動過程，只需要一個 hart 即可開機並進入 Linux，主 hart 進入 Linux 後，可以依序啟動其他 hart</p><p>以下是 <a href="https://github.com/riscv-non-isa/riscv-sbi-doc/blob/master/src/ext-hsm.adoc" target="_blank" rel="noopener noreferrer">RISC-V SBI HSM Extension</a> 管理 hart 的方式，從下圖片中可以看到 hart 在 HSM 的管理下會有以下七種狀態，分別為：</p><ul><li><code>STARTED</code>: hart 已物理上電並正常執行</li><li><code>STOPPED</code>: hart 不在 S mode 或更低特權模式下運行，如果底層平台具有物理斷電 hart 的機制，則它可以會被 SBI 實現斷電</li><li><code>SUSPENDED</code>: hart 處於低耗電狀態，如等待中斷或特定事件發生，發生時就會回到 <code>STARTED</code> 狀態</li><li><code>STOP_PENDING</code>、<code>START_PENDING</code>、<code>SUSPEND_PENDING</code>、<code>RESUME_PENDING</code>：代表正在進入下一個狀態，但由於 semu 是模擬器，因此這幾個狀態可以直接忽略，但在實際硬體運作上，作業系統會透過 sbi_hart_get_status 來取得 hart 的狀態，並根據取得的狀態做後續的動作</li></ul><h4 id="sbi-ipi-extension" tabindex="-1"><a class="header-anchor" href="#sbi-ipi-extension"><span>SBI IPI Extension</span></a></h4><p>在 spec 裡面提到，當 hart 處於 <code>SUSPENDED</code> 的狀態，hart 會在收到中斷後切回 <code>STARTED</code> 模式，因此我們必須要有一個方式能夠讓 hart 之間能夠把對方叫起來，此時就要用到 <a href="https://github.com/riscv-non-isa/riscv-sbi-doc/blob/master/src/ext-ipi.adoc" target="_blank" rel="noopener noreferrer">IPI Extension</a> 了</p><p>根據 IPI Extension 的定義，當有 hart 透過 IPI 這個 SBI 嘗試叫醒其他 hart 的話，就會對那個 hart 送出 supervisor software interrupt。 至於這個 supervisor software interrupt 要如何作到並沒有詳細定義，一般情況可以使用 <a href="https://github.com/riscv/riscv-aclint" target="_blank" rel="noopener noreferrer">ACLINT</a> 或 CLINT 作到，在模擬器上也可以考慮不實作前述相關硬體，直接模擬軟體中斷即可</p>',14)),i("blockquote",null,[i("p",null,[s[6]||(s[6]=a("(")),i("mjx-container",c,[(p(),h("svg",A,s[4]||(s[4]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mi"},[i("text",{"data-variant":"normal",transform:"scale(1,-1)","font-size":"884px","font-family":"serif"},"§")])])],-1)]))),s[5]||(s[5]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",{mathvariant:"normal"},"§")])],-1))]),s[7]||(s[7]=a(" 7.1 in ")),s[8]||(s[8]=i("a",{href:"https://github.com/riscv-non-isa/riscv-sbi-doc/tree/master",target:"_blank",rel:"noopener noreferrer"},"riscv-sbi-doc",-1)),s[9]||(s[9]=a(") Send an inter-processor interrupt to all the harts defined in hart_mask. Interprocessor interrupts manifest at the receiving harts as the supervisor software interrupts."))])]),s[22]||(s[22]=n(`<h4 id="sbi-timer-extension" tabindex="-1"><a class="header-anchor" href="#sbi-timer-extension"><span>SBI TIMER Extension</span></a></h4><p>Linux kernel 會不斷設定 timer 來設定下一次的 timer 中斷來達到現代作業系統所需的一些功能，像是排程。 而 <a href="https://github.com/riscv-non-isa/riscv-sbi-doc/blob/master/src/ext-time.adoc" target="_blank" rel="noopener noreferrer">RISC-V SBI TIMER Extension</a> 定義了上述所需的界面。 Linux kernel 會透過讀取 hart 上的暫存器 time 後根據 time 的數值呼叫 <code>sbi_set_timer</code> 設定下一次的 timer interrupt：</p><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// https://elixir.bootlin.com/linux/v6.12.4/source/arch/riscv/kernel/sbi.c#L310</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * sbi_set_timer() - Program the timer for next timer event.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic;">@stime_value:</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> The value after which next timer event should fire.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * Return: None.</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> sbi_set_timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint64_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> stime_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">	__sbi_set_timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(stime_value);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根據 TIMER Extension 的定義，我們所傳入的參數是一個 Absolute time，也就當 Timer 的時間超過所傳入的參數時，就會觸發 timer interrupt。而非呼叫 TIMER Extension 當下的 Timer 時間加上傳入的參數</p>`,4)),i("blockquote",null,[i("p",null,[s[12]||(s[12]=a("(")),i("mjx-container",o,[(p(),h("svg",g,s[10]||(s[10]=[i("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[i("g",{"data-mml-node":"math"},[i("g",{"data-mml-node":"mi"},[i("text",{"data-variant":"normal",transform:"scale(1,-1)","font-size":"884px","font-family":"serif"},"§")])])],-1)]))),s[11]||(s[11]=i("mjx-assistive-mml",{unselectable:"on",display:"inline"},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mi",{mathvariant:"normal"},"§")])],-1))]),s[13]||(s[13]=a(" 5.1 in ")),s[14]||(s[14]=i("a",{href:"https://github.com/riscv-non-isa/riscv-sbi-doc/tree/master",target:"_blank",rel:"noopener noreferrer"},"riscv-sbi-doc",-1)),s[15]||(s[15]=a(") Programs the clock for next event after stime_value time. stime_value is in absolute time. This function must clear the pending timer interrupt bit as well."))])]),s[23]||(s[23]=n(`<h4 id="如何確認多核模擬器正確運作" tabindex="-1"><a class="header-anchor" href="#如何確認多核模擬器正確運作"><span>如何確認多核模擬器正確運作?</span></a></h4><p>由於 linux 依賴於 HSM extension，因此我們可以在 Linux 中透過 <code>/proc/cpuinfo</code> 來驗證多核是否正確運作及 HSM 的實作是否正確，並可利用 <code>/proc/interrupts</code> 檢查 timer interrupt 的運作，還有透過查看 <code>/proc/device-tree</code> 來確認 ACLINT 是否有被正確識別：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>## cat /proc/cpuinfo </span></span>
<span class="line"><span>processor       : 0</span></span>
<span class="line"><span>hart            : 0</span></span>
<span class="line"><span>isa             : rv32ima</span></span>
<span class="line"><span>mmu             : sv32</span></span>
<span class="line"><span>mvendorid       : 0x12345678</span></span>
<span class="line"><span>marchid         : 0x80000001</span></span>
<span class="line"><span>mimpid          : 0x1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>processor       : 1</span></span>
<span class="line"><span>hart            : 1</span></span>
<span class="line"><span>isa             : rv32ima</span></span>
<span class="line"><span>mmu             : sv32</span></span>
<span class="line"><span>mvendorid       : 0x12345678</span></span>
<span class="line"><span>marchid         : 0x80000001</span></span>
<span class="line"><span>mimpid          : 0x1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>processor       : 2</span></span>
<span class="line"><span>hart            : 2</span></span>
<span class="line"><span>isa             : rv32ima</span></span>
<span class="line"><span>mmu             : sv32</span></span>
<span class="line"><span>mvendorid       : 0x12345678</span></span>
<span class="line"><span>marchid         : 0x80000001</span></span>
<span class="line"><span>mimpid          : 0x1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>processor       : 3</span></span>
<span class="line"><span>hart            : 3</span></span>
<span class="line"><span>isa             : rv32ima</span></span>
<span class="line"><span>mmu             : sv32</span></span>
<span class="line"><span>mvendorid       : 0x12345678</span></span>
<span class="line"><span>marchid         : 0x80000001</span></span>
<span class="line"><span>mimpid          : 0x1</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## cat /proc/interrupts </span></span>
<span class="line"><span>           CPU0       CPU1       CPU2       CPU3       </span></span>
<span class="line"><span>  1:         81          0          0          0  SiFive PLIC   1 Edge      ttyS0</span></span>
<span class="line"><span>  2:          1          0          0          0  SiFive PLIC   3 Edge      virtio1</span></span>
<span class="line"><span>  3:          0          0          0          0  SiFive PLIC   2 Edge      virtio0</span></span>
<span class="line"><span>  5:       3738       3735       3734       3731  RISC-V INTC   5 Edge      riscv-timer</span></span>
<span class="line"><span>IPI0:        20         18         11          8  Rescheduling interrupts</span></span>
<span class="line"><span>IPI1:       178        634         40        609  Function call interrupts</span></span>
<span class="line"><span>IPI2:         0          0          0          0  CPU stop interrupts</span></span>
<span class="line"><span>IPI3:         0          0          0          0  CPU stop (for crash dump) interrupts</span></span>
<span class="line"><span>IPI4:         0          0          0          0  IRQ work interrupts</span></span>
<span class="line"><span>IPI5:         0          0          0          0  Timer broadcast interrupts</span></span>
<span class="line"><span>## ls /proc/device-tree/soc@F0000000/</span></span>
<span class="line"><span>#address-cells          mswi@4400000            sswi@4500000</span></span>
<span class="line"><span>#size-cells             mtimer@4300000          virtio@4100000</span></span>
<span class="line"><span>compatible              name                    virtio@4200000</span></span>
<span class="line"><span>interrupt-controller@0  ranges</span></span>
<span class="line"><span>interrupt-parent        serial@4000000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="reference" tabindex="-1"><a class="header-anchor" href="#reference"><span>Reference</span></a></h2><ul><li><a href="https://hackmd.io/@sysprog/HyQ9UQ2E0" target="_blank" rel="noopener noreferrer">Linux 核心專題: 多核 RISC-V 模擬和 Linux 驗證</a></li></ul>`,5))])}const v=r(d,[["render",u],["__file","index.html.vue"]]),b=JSON.parse(`{"path":"/risc-v/rv32emu-Introduction/","title":"rv32emu Introduction","lang":"en-US","frontmatter":{"title":"rv32emu Introduction","date":"2024-12-15T00:00:00.000Z","mathjax":true,"tag":"risc-v","category":"risc-v","description":"rv32emu Introduction 本篇撰寫於 12/12，rv32emu 以 Commit 451f8c0 為主，semu 以 PR #66 為主，由於於 semu 上實作的特性之後會移植到 rv32emu 上，因此本文的範例 code 先以 semu 為例，少了 JIT 的部分較易理解 論文：Accelerate RISC-V Instruc...","head":[["meta",{"property":"og:url","content":"https://mes0903.github.io/risc-v/rv32emu-Introduction/"}],["meta",{"property":"og:site_name","content":"Mes's Blog"}],["meta",{"property":"og:title","content":"rv32emu Introduction"}],["meta",{"property":"og:description","content":"rv32emu Introduction 本篇撰寫於 12/12，rv32emu 以 Commit 451f8c0 為主，semu 以 PR #66 為主，由於於 semu 上實作的特性之後會移植到 rv32emu 上，因此本文的範例 code 先以 semu 為例，少了 JIT 的部分較易理解 論文：Accelerate RISC-V Instruc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-27T02:46:50.000Z"}],["meta",{"property":"article:tag","content":"risc-v"}],["meta",{"property":"article:published_time","content":"2024-12-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-27T02:46:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"rv32emu Introduction\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-27T02:46:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mes\\",\\"url\\":\\"https://mes0903.github.io\\"}]}"]]},"git":{"createdTime":1740252389000,"updatedTime":1740624410000,"contributors":[{"name":"Mes","username":"Mes","email":"mes900903@gmail.com","commits":5,"url":"https://github.com/Mes"}]},"readingTime":{"minutes":13.99,"words":4197},"filePathRelative":"risc-v/rv32emu-Introduction/README.md","localizedDate":"December 15, 2024","excerpt":"","autoDesc":true}`);export{v as comp,b as data};
