import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{e as t,g as s,o as a}from"./app-C0Igsx34.js";const l={};function r(d,e){return a(),t("div",null,e[0]||(e[0]=[s(`<h1 id="risc-v-aclint" tabindex="-1"><a class="header-anchor" href="#risc-v-aclint"><span>RISC-V ACLINT</span></a></h1><ul><li>spec：<a href="https://github.com/riscv/riscv-aclint/blob/main/riscv-aclint.adoc" target="_blank" rel="noopener noreferrer">https://github.com/riscv/riscv-aclint/blob/main/riscv-aclint.adoc</a></li></ul><h1 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction"><span>Introduction</span></a></h1><ol><li><p>功能</p><details><summary>原文</summary><blockquote><p>This RISC-V ACLINT specification defines a set of memory mapped devices which provide inter-processor interrupts (IPI) and timer functionalities for each HART on a multi-HART RISC-V platform.</p></blockquote></details><p>ACLINT 是一組 memory mapped devices，用於在 multi-hart 的 RISC-V 平台上提供</p><ul><li>inter-processor interrupts (IPI)</li><li>定時器功能 (Timer functionalities)</li></ul></li><li><p>CLINT 的局限性</p><details><summary>原文</summary><blockquote><p>The SiFive Core-Local Interruptor (CLINT) device has been widely adopted in the RISC-V world to provide machine-level IPI and timer functionalities.</p><p>Unfortunately, the SiFive CLINT has a unified register map for both IPI and timer functionalities and it does not provide supervisor-level IPI functionality.</p></blockquote></details><ul><li>CLINT 在 RISC-V 平台上廣泛用於提供 Machine-level 的 IPI 和定時器功能</li><li>局限性 <ul><li>unified register map <ul><li>CLINT 將 IPI 和定時器功能的暫存器放在一個統一的地址空間中</li></ul></li><li>缺乏 supervisor-level IPI</li></ul></li></ul></li><li><p>ACLINT 的改進</p><details><summary>原文</summary><blockquote><p>The RISC-V ACLINT specification takes a more modular approach by defining separate memory mapped devices for IPI and timer functionalities.</p><p>This modularity allows RISC-V platforms to omit some of the RISC-V ACLINT devices for when the platform has an alternate mechanism.</p><p>In addition to modularity, the RISC-V ACLINT specification also defines a dedicated memory mapped device for supervisor-level IPIs.</p></blockquote></details><ul><li>modularity <ul><li>ACLINT 將 IPI 和定時器功能分別定義為獨立的 memory mapped device</li><li>如果平台有替代機制，可以選擇性地省略部分 ACLINT 設備</li></ul></li><li>另外 ACLINT 定義了專門的 memory mapped device 來支持 supervisor-level IPI，填補了 CLINT 的功能空缺</li></ul></li><li><p>ACLINT Devices</p><table><thead><tr><th>Name</th><th>Privilege Level</th><th>Functionality</th></tr></thead><tbody><tr><td>MTIMER</td><td>Machine</td><td>Fixed-frequency counter and timer events</td></tr><tr><td>MSWI</td><td>Machine</td><td>Inter-processor (or software) interrupts</td></tr><tr><td>SSWI</td><td>Supervisor</td><td>Inter-processor (or software) interrupts</td></tr></tbody></table></li><li><p>與 SiFive CLINT 的兼容性</p><details><summary>原文</summary><blockquote><p>The RISC-V ACLINT specification is defined to be backward compatible with the SiFive CLINT specification.</p><p>The register definitions and register offsets of the MTIMER and MSWI devices are compatible with the timer and IPI registers defined by the SiFive CLINT specification.</p></blockquote></details><ul><li>ACLINT 的 MTIMER 和 MSWI 設備的暫存器定義和偏移量與 SiFive CLINT 中的定時器和 IPI 暫存器保持一致</li></ul></li><li><p>CLINT 與 ACLINT 的邏輯關係</p><p>SiFive CLINT 設備可以被邏輯地視為兩個 ACLINT 設備的組合</p><table><thead><tr><th>SiFive CLINT Offset Range</th><th>ACLINT Device</th><th>Functionality</th></tr></thead><tbody><tr><td>0x0000_0000 - 0x0000_3fff</td><td>MSWI</td><td>Machine-level inter-processor (or software) interrupts</td></tr><tr><td>0x0000_4000 - 0x0000_bfff</td><td>MTIMER</td><td>Machine-level fixed-frequency counter and timer events</td></tr></tbody></table><ul><li>MSWI：對應 CLINT 地址範圍 0x0000_0000 - 0x0000_3fff，提供 Machine-level IPI</li><li>MTIMER：對應 CLINT 地址範圍 0x0000_4000 - 0x0000_bfff，提供 Machine-level 定時器功能</li></ul></li></ol><h1 id="machine-level-timer-device-mtimer" tabindex="-1"><a class="header-anchor" href="#machine-level-timer-device-mtimer"><span>Machine-level Timer Device (MTIMER)</span></a></h1><h2 id="introduction-1" tabindex="-1"><a class="header-anchor" href="#introduction-1"><span>Introduction</span></a></h2><details><summary>原文</summary><blockquote><p>The MTIMER device provides machine-level timer functionality for a set of HARTs on a RISC-V platform.</p><p>It has a single fixed-frequency monotonic time counter (<code>MTIME</code>) register and a time compare register (<code>MTIMECMP</code>) for each HART connected to the MTIMER device.</p><p>A MTIMER device not connected to any HART should only have a <code>MTIME</code> register and no <code>MTIMECMP</code> registers.</p></blockquote></details><ul><li>MTIMER 為一組 HART 提供 Machine-level 的定時器功能，用於支持計時和產生定時器中斷</li><li><code>MTIME</code> Register <ul><li>每個 HART 有一個對應的 <code>MTIME</code> Register，其是一個單調遞增的固定頻率時間計數器，適用於所有連接到 MTIMER 的 HART</li></ul></li><li><code>MTIMECMP</code> Register <ul><li>每個 HART 有一個對應的 <code>MTIMECMP</code> Register，作為對應的時間比較暫存器</li><li>當 <code>MTIME</code> 的值達到或超過 <code>MTIMECMP</code> 的值時，觸發 Machine-level 的定時器中斷</li></ul></li><li>如果 MTIMER 沒有連接到任何 HART <ul><li>它應該只包含 <code>MTIME</code> 暫存器</li><li>不需要包含任何 <code>MTIMECMP</code> 暫存器，因為沒有 HART 需要時間比較功能</li></ul></li></ul><details><summary>原文</summary><blockquote><p>On a RISC-V platform with multiple MTIMER devices:</p><ul><li><p>Each MTIMER device provides machine-level timer functionality for a different<br> (or disjoint) set of HARTs.</p><p>A MTIMER device assigns a HART index starting from zero to each HART associated with it.</p><p>The HART index assigned to a HART by the MTIMER device may or may not have any relationship with the unique HART identifier (<em>hart ID</em>) that the RISC-V Privileged Architecture assigns to the HART.</p></li><li><p>Two or more MTIMER devices can share the same physical MTIME register while having their own separate MTIMECMP registers.</p></li><li><p>The MTIMECMP registers of a MTIMER device must only compare against the MTIME register of the same MTIMER device for generating machine-level timer interrupt.</p></li></ul><p>The maximum number of HARTs supported by a single MTIMER device is 4095 which is equivalent to the maximum number of MTIMECMP registers.</p></blockquote></details><ul><li>每個 MTIMER 設備只負責一組不同（或不相交）的 HART 的 machine-level 定時器功能</li><li>HART Index <ul><li>MTIMER 將從 0 開始分配 index 給所連接的 HART</li><li>index 與 RISC-V 特權架構分配的 HART ID 不一定有關</li></ul></li><li><code>MTIME</code> 暫存器共享 <ul><li>多個 MTIMER 設備可以共用一個物理上的 <code>MTIME</code> 暫存器</li><li>但 MTIMER 設備仍擁有獨立的 <code>MTIMECMP</code> 暫存器，確保每個 HART 的比較和中斷處理是分開的</li></ul></li><li><code>MTIMECMP</code> 的比較規則 <ul><li><code>MTIMECMP</code> 暫存器只能與同一 MTIMER 設備的 <code>MTIME</code> 暫存器進行比較</li><li>這種設計確保中斷由 MTIMER 設備內部獨立管理</li></ul></li><li>每個 MTIMER 設備最多支持 4095 個 HART <ul><li>這與最多支持 4095 個 MTIMECMP 暫存器相對應</li></ul></li></ul><h2 id="register-map" tabindex="-1"><a class="header-anchor" href="#register-map"><span>Register Map</span></a></h2><details><summary>原文</summary><blockquote><p>A MTIMER device has two separate base addresses: one for the MTIME register and another for the MTIMECMP registers.</p><p>These separate base addresses of a single MTIMER device allows multiple MTIMER devices to share the same physical MTIME register.</p></blockquote></details><ul><li>MTIMER 設備有兩個 base addresses <ul><li><code>MTIME</code> Register Base Address：提供 Machine-level 的時間計數功能</li><li><code>MTIMECMP</code> Registers Base Address：為每個 HART 提供獨立的時間比較功能</li><li>用來使不同的 MTIMER 設備可以共享一個物理上的 <code>MTIME</code> 暫存器，但擁有獨立的 MTIMECMP 暫存器</li></ul></li></ul><p>ACLINT MTIMER Time Register Map：</p><table><thead><tr><th>Offset</th><th>Width</th><th>Attr</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>0x0000_0000</td><td>8B</td><td>RW</td><td>MTIME</td><td>Machine-level time counter</td></tr></tbody></table><p>ACLINT MTIMER Compare Register Map：</p><table><thead><tr><th>Offset</th><th>Width</th><th>Attr</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>0x0000_0000</td><td>8B</td><td>RW</td><td>MTIMECMP0</td><td>HART index 0 machine-level time compare</td></tr><tr><td>0x0000_0008</td><td>8B</td><td>RW</td><td>MTIMECMP1</td><td>HART index 1 machine-level time compare</td></tr><tr><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr><tr><td>0x0000_7FF0</td><td>8B</td><td>RW</td><td>MTIMECMP4094</td><td>HART index 4094 machine-level time compare</td></tr></tbody></table><h2 id="mtime-register-offset-0x00000000" tabindex="-1"><a class="header-anchor" href="#mtime-register-offset-0x00000000"><span>MTIME Register (Offset: 0x00000000)</span></a></h2><details><summary>原文</summary><blockquote><p>The <code>MTIME</code> register is a 64-bit read-write register that contains the number of cycles counted based on a fixed reference frequency.</p><p>On MTIMER device reset, the MTIME register is cleared to zero.</p></blockquote></details><ul><li><code>MTIME</code> 為 64-bit Read-Write 暫存器</li><li>用於存儲基於固定參考頻率（fixed reference frequency）的計數器值</li><li>MTIMER reset 時，暫存器的值清為 0</li><li>提供單調遞增的時間基準，供 <code>MTIMECMP</code> 暫存器進行比較</li><li>用於觸發 Machine-level timer 中斷</li></ul><h2 id="mtimecmp-registers-offsets-0x00000000-0x00007ff0" tabindex="-1"><a class="header-anchor" href="#mtimecmp-registers-offsets-0x00000000-0x00007ff0"><span>MTIMECMP Registers (Offsets: 0x00000000 - 0x00007FF0)</span></a></h2><details><summary>原文</summary><blockquote><p>The <code>MTIMECMP</code> registers are per-HART 64-bit read-write registers.</p><p>It contains the <code>MTIME</code> register value at which machine-level timer interrupt is to be triggered for the corresponding HART.</p></blockquote></details><ul><li>每個 HART 分配一個對應的 64-bit Read-Write <code>MTIMECMP</code> 暫存器</li><li>存儲一個 Target Value，當 <code>MTIME</code> 的值達到或超過此值時，對應的 HART 會觸發 Machine-level timer 中斷</li></ul><details><summary>原文</summary><blockquote><p>The machine-level timer interrupt of a HART is pending whenever <code>MTIME</code> is greater than or equal to the value in the corresponding <code>MTIMECMP</code> register.</p><p>The machine-level timer interrupt of a HART is cleared whenever <code>MTIME</code> is less than the value of the corresponding <code>MTIMECMP</code> register.</p><p>The machine-level timer interrupt is reflected in the MTIP bit of the <code>mip</code> CSR.</p><p>On MTIMER device reset, the <code>MTIMECMP</code> registers are in unknown state.</p></blockquote></details><ul><li>中斷觸發條件： <ul><li>當 <code>MTIME &gt;= MTIMECMP</code> 時，對應 HART 的 Machine-level timer 中斷處於 pending 狀態</li></ul></li><li>中斷清除條件： <ul><li>當 <code>MTIME &lt; MTIMECMP</code> 時，對應 HART 的 Machine-level timer 中斷被清除</li></ul></li><li>中斷狀態會反映在每個 HART 的 <code>mip</code> CSR 的 MTIP bit</li><li>MTIMER 設備重置後，所有 <code>MTIMECMP</code> 暫存器處於未知狀態</li></ul><h2 id="synchronizing-multiple-mtime-registers" tabindex="-1"><a class="header-anchor" href="#synchronizing-multiple-mtime-registers"><span>Synchronizing Multiple MTIME Registers</span></a></h2><details><summary>原文</summary><blockquote><p>A RISC-V platform can have multiple HARTs grouped into hierarchical topology groups (such as clusters, nodes, or sockets) where each topology group has its own MTIMER device.</p><p>Further, such RISC-V platforms can also allow clock-gating or powering off for a topology group (including the MTIMER device) at runtime.</p></blockquote></details><ul><li>在多 HART 的 RISC-V 平台上，HART 可以按照 clusters、nodes 或 sockets 劃分為拓撲組，每個拓撲組可以擁有獨立的 MTIMER 設備</li><li>平台可以允許對整個拓撲組（包括 MTIMER 設備）進行 clock-gating 或關機的操作</li></ul><details><summary>原文</summary><blockquote><p>On a RISC-V platform with multiple MTIMER devices residing on the same die, each device must satisfy the RISC-V architectural requirement that all the <code>MTIME</code> registers with respect to each other, and all the per-HART time CSRs with respect to each other, are synchronized to within one <code>MTIME</code> tick period.</p><p>For example, if the <code>MTIME</code> tick period is 10ns, then the <code>MTIME</code> registers, and their associated <code>time</code> CSRs, should respectively be synchronized to within 10ns of each other.</p></blockquote></details><ul><li>同一晶片內 <ul><li>所有 <code>MTIME</code> Registers 和每個 HART 的 <code>time</code> CSRs 必須在一個 MTIME tick 週期內同步</li><li>舉例來說，若 <code>MTIME</code> tick period 為 10ns，則同步偏差應限制在 10ns 內</li></ul></li></ul><details><summary>原文</summary><blockquote><p>On a RISC-V platform with multiple MTIMER devices on different die, the <code>MTIME</code> registers (and their associated time CSRs) on different die may be synchronized to only within a specified interval of each other that is larger than the <code>MTIME</code> tick period.</p><p>A platform may define a maximum allowed interval.</p></blockquote></details><ul><li>不同晶片中 <ul><li>各晶片的 <code>MTIME</code> Registers 和 <code>time</code> CSRs 可以允許更大的同步偏差</li><li>平台可定義允許的最大同步間隔</li></ul></li></ul><details><summary>原文</summary><blockquote><p>To satisfy the preceding <code>MTIME</code> synchronization requirements:</p><ul><li><p>All <code>MTIME</code> registers should have the same input clock so as to avoid runtime drift between separate <code>MTIME</code> registers (and their associated <code>time</code> CSRs)</p></li><li><p>Upon system reset, the hardware must initialize and synchronize all <code>MTIME</code> registers to zero</p></li><li><p>When a MTIMER device is stopped and started again due to, say, power management actions, the software should re-synchronize this <code>MTIME</code> register with all other <code>MTIME</code> registers</p></li></ul></blockquote></details><ul><li>所有 <code>MTIME</code> Registers 應使用相同的輸入時鐘，避免運行時的時鐘有誤差</li><li>系統重置時，硬體需初始化並同步所有 <code>MTIME</code> Registers 為零</li><li>當 MTIMER 因功耗管理等原因停止並重新啟動時，軟體需重新將該 <code>MTIME</code> Register 與其他 <code>MTIME</code> Registers 同步</li></ul><details><summary>原文</summary><blockquote><p>When software updates one, multiple, or all <code>MTIME</code> registers, it must maintain the preceding synchronization requirements (through measuring and then taking into account the differing latencies of performing reads or writes to the different MTIME registers).</p></blockquote></details><ul><li>當軟體更新 <code>MTIME</code> Registers 時，需測量並補償不同暫存器的讀寫延遲以滿足前面的同步要求</li></ul><details><summary>原文</summary><blockquote><p>As an example, the below RISC-V 64-bit assembly sequence can be used by software to synchronize a <code>MTIME</code> register with reference to another <code>MTIME</code> register.</p><p><strong>NOTE:</strong> On some RISC-V platforms, the MTIME synchronization sequence (i.e. the aclint_mtime_sync() function above) will need to be repeated few times until delta between target MTIME register and reference MTIME register is zero (or very close to zero).</p></blockquote></details><p>以下為一範例 asm code，將目標 <code>MTIME</code> Register 與參考 <code>MTIME</code> Register 進行同步：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> * unsigned long aclint_mtime_sync(unsigned long target_mtime_address,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> *                                 unsigned long reference_mtime_address)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .globl aclint_mtime_sync</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">aclint_mtime_sync:</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* Read target MTIME register in T0 register */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ld        t0, (a0)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        fence     i, i</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* Read reference MTIME register in T1 register */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ld        t1, (a1)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        fence     i, i</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* Read target MTIME register in T2 register */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ld        t2, (a0)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        fence     i, i</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * Compute target MTIME adjustment in T3 register</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         * T3 = T1 - ((T0 + T2) / 2)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        srli      t0, t0, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        srli      t2, t2, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        add       t3, t0, t2</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sub       t3, t1, t3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* Update target MTIME register */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ld        t4, (a0)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        add       t4, t4, t3</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        sd        t4, (a0)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* Return MTIME adjustment value */</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        add       a0, t3, zero</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        ret</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>某些平台可能需要多次重複同步過程，直到目標與參考 <code>MTIME</code> Register 之間的偏差接近零</p><h1 id="machine-level-software-interrupt-device-mswi" tabindex="-1"><a class="header-anchor" href="#machine-level-software-interrupt-device-mswi"><span>Machine-level Software Interrupt Device (MSWI)</span></a></h1><h2 id="introduction-2" tabindex="-1"><a class="header-anchor" href="#introduction-2"><span>Introduction</span></a></h2><details><summary>原文</summary><blockquote><p>The MSWI device provides machine-level IPI functionality for a set of HARTs on a RISC-V platform.</p><p>It has an IPI register (<code>MSIP</code>) for each HART connected to the MSWI device.</p><p>On a RISC-V platform with multiple MSWI devices, each MSWI device provides machine-level IPI functionality for a different (or disjoint) set of HARTs.</p><p>A MSWI device assigns a HART index starting from zero to each HART associated with it.</p><p>The HART index assigned to a HART by the MSWI device may or may not have any relationship with the unique HART identifier (hart ID) that the RISC-V Privileged Architecture assigns to the HART.</p><p>The maximum number of HARTs supported by a single MSWI device is 4095 which is equivalent to the maximum number of <code>MSIP</code> registers.</p></blockquote></details><ul><li>MSWI 設備為一組 HART 提供 Machine-level IPI 的功能</li><li>對於連接到 MSWI 設備的每個 HART，它都有一個對應的 IPI 暫存器（MSIP）</li><li>一個平台可以有多個 MSWI 設備，每個設備負責不同（或不相交）的一組 HART</li><li>HART Index <ul><li>每個 MSWI 設備從 index 0 開始為其連接的 HART 分配一個 HART index</li><li>該 index 用於標識 HART，但不一定與 RISC-V 特權架構分配的 HART ID 有關</li></ul></li><li>每個 MSWI 設備最多支持 4095 個 HART，這與最多支持 4095 個 <code>MSIP</code> Registers 相對應</li></ul><h2 id="register-map-1" tabindex="-1"><a class="header-anchor" href="#register-map-1"><span>Register Map</span></a></h2><p>ACLINT MSWI Device Register Map：</p><table><thead><tr><th>Offset</th><th>Width</th><th>Attr</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>0x0000_0000</td><td>4B</td><td>RW</td><td>MSIP0</td><td>HART index 0 machine-level IPI register</td></tr><tr><td>0x0000_0004</td><td>4B</td><td>RW</td><td>MSIP1</td><td>HART index 1 machine-level IPI register</td></tr><tr><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr><tr><td>0x0000_3FFC</td><td>4B</td><td></td><td>RESERVED</td><td>Reserved for future use.</td></tr></tbody></table><ul><li>addresse offset <ul><li>第 0 個 HART 的 MSIP 位於 0x0000_0000</li><li>第 1 個 HART 的 MSIP 位於 0x0000_0004</li><li>依此類推，每個暫存器占用 4 字節（32 位）</li></ul></li><li>地址範圍 0x0000_3FFC 為保留區域，用於未來擴展</li></ul><h2 id="msip-registers-offsets-0x00000000-0x00003ff8" tabindex="-1"><a class="header-anchor" href="#msip-registers-offsets-0x00000000-0x00003ff8"><span>MSIP Registers (Offsets: 0x00000000 - 0x00003FF8)</span></a></h2><details><summary>原文</summary><blockquote><p>Each MSIP register is a 32-bit wide WARL register where the upper 31 bits are wired to zero.</p><p>The least significant bit is reflected in MSIP of the <code>mip</code> CSR.</p><p>A machine-level software interrupt for a HART is pending or cleared by writing <code>1</code> or <code>0</code> respectively to the corresponding MSIP register.</p><p>On MSWI device reset, each MSIP register is cleared to zero.</p></blockquote></details><ul><li>每個 <code>MSIP</code> 暫存器都是一個 32 位元寬的 WARL 暫存器</li><li>高 31 位硬接線為 0</li><li>最低有效位（LSB）反映 <code>mip</code> CSR 的 MSIP bit</li><li>寫入 <code>1</code> 可設置中斷掛起</li><li>寫入 <code>0</code> 可清除中斷</li><li>MSWI 設備重設時，每個 <code>MSIP</code> 暫存器都清零</li></ul><h1 id="supervisor-level-software-interrupt-device-sswi" tabindex="-1"><a class="header-anchor" href="#supervisor-level-software-interrupt-device-sswi"><span>Supervisor-level Software Interrupt Device (SSWI)</span></a></h1><h2 id="introduction-3" tabindex="-1"><a class="header-anchor" href="#introduction-3"><span>Introduction</span></a></h2><details><summary>原文</summary><blockquote><p>The SSWI device provides supervisor-level IPI functionality for a set of HARTs on a RISC-V platform.</p><p>It provides a register to set an IPI (<code>SETSSIP</code>) for each HART connected to the SSWI device.</p></blockquote></details><ul><li>SSWI 設備為一組 HART 提供 Supervisor-level IPI 功能</li><li>對於連接到 SSWI 設備的每個 HART，它都有一個對應的 IPI 暫存器（<code>SETSSIP</code>）</li></ul><details><summary>原文</summary><blockquote><p>On a RISC-V platform with multiple SSWI devices, each SSWI device provides supervisor-level IPI functionality for a different (or disjoint) set of HARTs.</p><p>A SSWI device assigns a HART index starting from zero to each HART associated with it.</p><p>The HART index assigned to a HART by the SSWI device may or may not have any relationship with the unique HART identifier (hart ID) that the RISC-V Privileged Architecture assigns to the HART.</p><p>The maximum number of HARTs supported by a single SSWI device is 4095 which is equivalent to the maximum number of <code>SETSSIP</code> registers.</p></blockquote></details><ul><li>在具有多個 SSWI 設備的 RISC-V 平台上，每個 SSWI 設備為不同（或不相交）的一組 HART 提供 Supervisor-level IPI 功能</li><li>HART Index <ul><li>每個 SSWI 設備從 index 0 開始為其連接的 HART 分配一個 HART index</li><li>該 index 用於標識 HART，但不一定與 RISC-V 特權架構分配的 HART ID 有關</li></ul></li><li>每個 SSWI 設備最多支持 4095 個 HART，對應到 4095 個 <code>SETSSIP</code> Registers</li></ul><h2 id="register-map-2" tabindex="-1"><a class="header-anchor" href="#register-map-2"><span>Register Map</span></a></h2><p>ACLINT SSWI Device Register Map：</p><table><thead><tr><th>Offset</th><th>Width</th><th>Attr</th><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>0x0000_0000</td><td>4B</td><td>RW</td><td>SETSSIP0</td><td>HART index 0 set supervisor-level IPI register</td></tr><tr><td>0x0000_0004</td><td>4B</td><td>RW</td><td>SETSSIP1</td><td>HART index 1 set supervisor-level IPI register</td></tr><tr><td>...</td><td>...</td><td>...</td><td>...</td><td>...</td></tr><tr><td>0x0000_3FFC</td><td>4B</td><td></td><td>RESERVED</td><td>Reserved for future use.</td></tr></tbody></table><ul><li>addresse offset <ul><li>第 0 個 HART 的 MSIP 位於 0x0000_0000</li><li>第 1 個 HART 的 MSIP 位於 0x0000_0004</li><li>依此類推，每個暫存器占用 4 字節（32 位）</li></ul></li><li>地址範圍 0x0000_3FFC 為保留區域，用於未來擴展</li></ul><h2 id="setssip-registers-offsets-0x00000000-0x00003ff8" tabindex="-1"><a class="header-anchor" href="#setssip-registers-offsets-0x00000000-0x00003ff8"><span>SETSSIP Registers (Offsets: 0x00000000 - 0x00003FF8)</span></a></h2><details><summary>原文</summary><blockquote><p>Each <code>SETSSIP</code> register is a 32-bit wide WARL register where the upper 31 bits are wired to zero.</p><p>The least significant bit of a SETSSIP register always reads 0. Writing 0 to the least significant bit of a <code>SETSSIP</code> register has no effect whereas writing 1 to the least significant bit sends an edge-sensitive interrupt signal to the corresponding HART causing the HART to set SSIP in the <code>mip</code> CSR.</p><p>Writes to a <code>SETSSIP</code> register are guaranteed to be reflected in SSIP of the corresponding HART but not necessarily immediately.</p></blockquote></details><ul><li>每個 <code>SETSSIP</code> 暫存器都是一個 32 位元寬的 WARL 暫存器</li><li>高 31 位硬接線為 0</li><li>讀取 <code>SETSSIP</code> 暫存器的最低有效位元始終返回 <code>0</code></li><li>將 <code>0</code> 寫入 <code>SETSSIP</code> 暫存器的最低有效位元不會產生任何影響</li><li>將 <code>1</code> 寫入最低有效位元會向對應的 HART 發送 edge-sensitive 中斷訊號，導致 HART 在 <code>mip</code> CSR 中設定 SSIP</li><li>對 <code>SETSSIP</code> 暫存器的寫入操作保證會反映在對應 HART 的 SSIP 中，但不一定會立即反映</li></ul><details><summary>原文</summary><blockquote><p><strong>NOTE</strong>: The RISC-V Privileged Architecture defines SSIP in <code>mip</code> and <code>sip</code> CSRs as a <span class="yellow">writeable</span> bit so the M-mode or S-mode software can directly clear SSIP.</p></blockquote></details><ul><li>RISC-V 特權架構中定義 SSIP <code>mip</code> 和 <code>sip</code> CSR 作為可寫位，因此 M mode 或 S mode 中軟體可以直接清除 SSIP</li><li>黃色部分不確定是拼錯還是有意為之</li></ul>`,66)]))}const c=i(l,[["render",r],["__file","index.html.vue"]]),h=JSON.parse(`{"path":"/risc-v/ACLINT/","title":"RISC-V ACLINT","lang":"en-US","frontmatter":{"title":"RISC-V ACLINT","date":"2024-12-11T00:00:00.000Z","mathjax":true,"tag":"risc-v","category":"risc-v","description":"RISC-V ACLINT spec：https://github.com/riscv/riscv-aclint/blob/main/riscv-aclint.adoc Introduction 功能 原文 This RISC-V ACLINT specification defines a set of memory mapped devices w...","head":[["meta",{"property":"og:url","content":"https://mes0903.github.io/risc-v/ACLINT/"}],["meta",{"property":"og:site_name","content":"Mes's Blog"}],["meta",{"property":"og:title","content":"RISC-V ACLINT"}],["meta",{"property":"og:description","content":"RISC-V ACLINT spec：https://github.com/riscv/riscv-aclint/blob/main/riscv-aclint.adoc Introduction 功能 原文 This RISC-V ACLINT specification defines a set of memory mapped devices w..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-02-25T22:47:50.000Z"}],["meta",{"property":"article:tag","content":"risc-v"}],["meta",{"property":"article:published_time","content":"2024-12-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-25T22:47:50.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"RISC-V ACLINT\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-25T22:47:50.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mes\\",\\"url\\":\\"https://mes0903.github.io\\"}]}"]]},"git":{"createdTime":1740252389000,"updatedTime":1740523670000,"contributors":[{"name":"Mes","username":"Mes","email":"mes900903@gmail.com","commits":3,"url":"https://github.com/Mes"}]},"readingTime":{"minutes":12.64,"words":3793},"filePathRelative":"risc-v/ACLINT/README.md","localizedDate":"December 11, 2024","excerpt":"","autoDesc":true}`);export{c as comp,h as data};
